
TestMotorServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08004e3c  08004e3c  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e3c  08004e3c  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020048  2**0
                  CONTENTS
 10 .bss          0000155c  20000048  20000048  00020048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015a4  200015a4  00020048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c168  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f1  00000000  00000000  0002c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  0002f550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcaf  00000000  00000000  0002ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcaf  00000000  00000000  0004dc2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0626  00000000  00000000  0005b8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010bf04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bc0  00000000  00000000  0010bf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000048 	.word	0x20000048
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004db0 	.word	0x08004db0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	08004db0 	.word	0x08004db0

080001d0 <AppTest_Init>:
/* Includes ------------------------------------------------------------------*/
#include <servo_motor_outputs.h>


void AppTest_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	SERVO_Motor_Init();
 80001d4:	f000 f80e 	bl	80001f4 <SERVO_Motor_Init>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}

080001dc <AppTest_Loop>:

void AppTest_Loop(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	SERVO_Motor_Loop();
 80001e0:	f000 f82c 	bl	800023c <SERVO_Motor_Loop>
}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <AppTest_CallEachSecond>:

void AppTest_CallEachSecond(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	SERVO_Motor_OneSecondCall();
 80001ec:	f000 f856 	bl	800029c <SERVO_Motor_OneSecondCall>
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <SERVO_Motor_Init>:
static uint8_t _inputs_read_pin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState *status);


// FUNCTIONS
void SERVO_Motor_Init(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	e011      	b.n	8000224 <SERVO_Motor_Init+0x30>
	{
		DO_OFF(DO_SERVO_GDT, i);
 8000200:	2201      	movs	r2, #1
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	fa02 f303 	lsl.w	r3, r2, r3
 8000208:	b21b      	sxth	r3, r3
 800020a:	43db      	mvns	r3, r3
 800020c:	b21a      	sxth	r2, r3
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <SERVO_Motor_Init+0x44>)
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	b21b      	sxth	r3, r3
 8000214:	4013      	ands	r3, r2
 8000216:	b21b      	sxth	r3, r3
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <SERVO_Motor_Init+0x44>)
 800021c:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3301      	adds	r3, #1
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2b06      	cmp	r3, #6
 8000228:	ddea      	ble.n	8000200 <SERVO_Motor_Init+0xc>
	}
}
 800022a:	bf00      	nop
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	20000064 	.word	0x20000064

0800023c <SERVO_Motor_Loop>:

void SERVO_Motor_Loop(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	static uint8_t TikTok = 0;

	_servo_outputs_refresh_all();
 8000240:	f000 f87e 	bl	8000340 <_servo_outputs_refresh_all>

	if(is_timout && !TikTok)
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <SERVO_Motor_Loop+0x58>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	2b00      	cmp	r3, #0
 800024c:	d00c      	beq.n	8000268 <SERVO_Motor_Loop+0x2c>
 800024e:	4b12      	ldr	r3, [pc, #72]	; (8000298 <SERVO_Motor_Loop+0x5c>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d108      	bne.n	8000268 <SERVO_Motor_Loop+0x2c>
	{
		is_timout = 0;
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <SERVO_Motor_Loop+0x58>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
		TikTok = 1;
 800025c:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <SERVO_Motor_Loop+0x5c>)
 800025e:	2201      	movs	r2, #1
 8000260:	701a      	strb	r2, [r3, #0]
		SERVO_Motor_All_High();
 8000262:	f000 f827 	bl	80002b4 <SERVO_Motor_All_High>
 8000266:	e010      	b.n	800028a <SERVO_Motor_Loop+0x4e>
	}
	else if(is_timout && TikTok)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <SERVO_Motor_Loop+0x58>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00b      	beq.n	800028a <SERVO_Motor_Loop+0x4e>
 8000272:	4b09      	ldr	r3, [pc, #36]	; (8000298 <SERVO_Motor_Loop+0x5c>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d007      	beq.n	800028a <SERVO_Motor_Loop+0x4e>
	{
		is_timout = 0;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <SERVO_Motor_Loop+0x58>)
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
		TikTok = 0;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <SERVO_Motor_Loop+0x5c>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		SERVO_Motor_All_Low();
 8000286:	f000 f837 	bl	80002f8 <SERVO_Motor_All_Low>
	}

	_165_inputs_scan();
 800028a:	f000 f885 	bl	8000398 <_165_inputs_scan>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	20000066 	.word	0x20000066
 8000298:	20000067 	.word	0x20000067

0800029c <SERVO_Motor_OneSecondCall>:

void SERVO_Motor_OneSecondCall(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	is_timout = 1;
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <SERVO_Motor_OneSecondCall+0x14>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	20000066 	.word	0x20000066

080002b4 <SERVO_Motor_All_High>:
{
	return DO_CHECK(DO_SERVO_GDT, pin);
}

void SERVO_Motor_All_High(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	e00f      	b.n	80002e0 <SERVO_Motor_All_High+0x2c>
	{
		DO_ON(DO_SERVO_GDT, i);
 80002c0:	2201      	movs	r2, #1
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	fa02 f303 	lsl.w	r3, r2, r3
 80002c8:	b21a      	sxth	r2, r3
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <SERVO_Motor_All_High+0x40>)
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <SERVO_Motor_All_High+0x40>)
 80002d8:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3301      	adds	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	ddec      	ble.n	80002c0 <SERVO_Motor_All_High+0xc>
	}
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	20000064 	.word	0x20000064

080002f8 <SERVO_Motor_All_Low>:

void SERVO_Motor_All_Low(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e011      	b.n	8000328 <SERVO_Motor_All_Low+0x30>
	{
		DO_OFF(DO_SERVO_GDT, i);
 8000304:	2201      	movs	r2, #1
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	fa02 f303 	lsl.w	r3, r2, r3
 800030c:	b21b      	sxth	r3, r3
 800030e:	43db      	mvns	r3, r3
 8000310:	b21a      	sxth	r2, r3
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <SERVO_Motor_All_Low+0x44>)
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	b21b      	sxth	r3, r3
 8000318:	4013      	ands	r3, r2
 800031a:	b21b      	sxth	r3, r3
 800031c:	b29a      	uxth	r2, r3
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <SERVO_Motor_All_Low+0x44>)
 8000320:	801a      	strh	r2, [r3, #0]
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3301      	adds	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b06      	cmp	r3, #6
 800032c:	ddea      	ble.n	8000304 <SERVO_Motor_All_Low+0xc>
	}
}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	20000064 	.word	0x20000064

08000340 <_servo_outputs_refresh_all>:

static void _servo_outputs_refresh_all(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0

	for(int i=0; i<DO_SERVO_TOTAL; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	607b      	str	r3, [r7, #4]
 800034a:	e019      	b.n	8000380 <_servo_outputs_refresh_all+0x40>
	{
		HAL_GPIO_WritePin(servo_motor_output_array[i].GPIOx, servo_motor_output_array[i].GPIO_Pin, DO_CHECK(DO_SERVO_GDT, i));
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <_servo_outputs_refresh_all+0x50>)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <_servo_outputs_refresh_all+0x50>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	00db      	lsls	r3, r3, #3
 800035a:	4413      	add	r3, r2
 800035c:	8899      	ldrh	r1, [r3, #4]
 800035e:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <_servo_outputs_refresh_all+0x54>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	b25a      	sxtb	r2, r3
 8000364:	2401      	movs	r4, #1
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	fa04 f303 	lsl.w	r3, r4, r3
 800036c:	b25b      	sxtb	r3, r3
 800036e:	4013      	ands	r3, r2
 8000370:	b25b      	sxtb	r3, r3
 8000372:	b2db      	uxtb	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	f000 fd23 	bl	8000dc0 <HAL_GPIO_WritePin>
	for(int i=0; i<DO_SERVO_TOTAL; i++)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3301      	adds	r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b06      	cmp	r3, #6
 8000384:	dde2      	ble.n	800034c <_servo_outputs_refresh_all+0xc>
	}
}
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bd90      	pop	{r4, r7, pc}
 8000390:	20000000 	.word	0x20000000
 8000394:	20000064 	.word	0x20000064

08000398 <_165_inputs_scan>:

static void _165_inputs_scan(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	GPIO_PinState status;

	if( _inputs_read_pin(EXT_PR__5V_GPIO_Port, EXT_PR__5V_Pin, &status) == 0 )
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	461a      	mov	r2, r3
 80003a2:	2102      	movs	r1, #2
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a8:	f000 f81a 	bl	80003e0 <_inputs_read_pin>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d10f      	bne.n	80003d2 <_165_inputs_scan+0x3a>
	{
		// If pin 160 Low
		if(status == GPIO_PIN_RESET)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d106      	bne.n	80003c6 <_165_inputs_scan+0x2e>
		{
			// pin 165 goes High
			HAL_GPIO_WritePin(SAUCEPUMP3_GPIO_Port, SAUCEPUMP3_Pin, GPIO_PIN_SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003be:	4807      	ldr	r0, [pc, #28]	; (80003dc <_165_inputs_scan+0x44>)
 80003c0:	f000 fcfe 	bl	8000dc0 <HAL_GPIO_WritePin>
		{
			// pin 165 goes low
			HAL_GPIO_WritePin(SAUCEPUMP3_GPIO_Port, SAUCEPUMP3_Pin, GPIO_PIN_RESET);
		}
	}
}
 80003c4:	e005      	b.n	80003d2 <_165_inputs_scan+0x3a>
			HAL_GPIO_WritePin(SAUCEPUMP3_GPIO_Port, SAUCEPUMP3_Pin, GPIO_PIN_RESET);
 80003c6:	2200      	movs	r2, #0
 80003c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003cc:	4803      	ldr	r0, [pc, #12]	; (80003dc <_165_inputs_scan+0x44>)
 80003ce:	f000 fcf7 	bl	8000dc0 <HAL_GPIO_WritePin>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	48001000 	.word	0x48001000

080003e0 <_inputs_read_pin>:

static uint8_t _inputs_read_pin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState *status)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	460b      	mov	r3, r1
 80003ea:	607a      	str	r2, [r7, #4]
 80003ec:	817b      	strh	r3, [r7, #10]
	GPIO_PinState status1 = GPIO_PIN_RESET;
 80003ee:	2300      	movs	r3, #0
 80003f0:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState status2 = GPIO_PIN_RESET;
 80003f2:	2300      	movs	r3, #0
 80003f4:	75bb      	strb	r3, [r7, #22]

	if(GPIOx != NULL && status != NULL)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d01c      	beq.n	8000436 <_inputs_read_pin+0x56>
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d019      	beq.n	8000436 <_inputs_read_pin+0x56>
	{
		status1 = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000402:	897b      	ldrh	r3, [r7, #10]
 8000404:	4619      	mov	r1, r3
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f000 fcc2 	bl	8000d90 <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	75fb      	strb	r3, [r7, #23]

		osDelay(DI_DEBAUNCE_DELAY_MS);
 8000410:	201e      	movs	r0, #30
 8000412:	f001 ffa8 	bl	8002366 <osDelay>

		status2 = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000416:	897b      	ldrh	r3, [r7, #10]
 8000418:	4619      	mov	r1, r3
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	f000 fcb8 	bl	8000d90 <HAL_GPIO_ReadPin>
 8000420:	4603      	mov	r3, r0
 8000422:	75bb      	strb	r3, [r7, #22]

		if( status1 == status2 )
 8000424:	7dfa      	ldrb	r2, [r7, #23]
 8000426:	7dbb      	ldrb	r3, [r7, #22]
 8000428:	429a      	cmp	r2, r3
 800042a:	d104      	bne.n	8000436 <_inputs_read_pin+0x56>
		{
			*status = status1;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	7dfa      	ldrb	r2, [r7, #23]
 8000430:	701a      	strb	r2, [r3, #0]
			return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	e000      	b.n	8000438 <_inputs_read_pin+0x58>
		}
	}

	return 1;
 8000436:	2301      	movs	r3, #1
}
 8000438:	4618      	mov	r0, r3
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	4a07      	ldr	r2, [pc, #28]	; (800046c <vApplicationGetIdleTaskMemory+0x2c>)
 8000450:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	4a06      	ldr	r2, [pc, #24]	; (8000470 <vApplicationGetIdleTaskMemory+0x30>)
 8000456:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000070 	.word	0x20000070
 8000470:	200000c4 	.word	0x200000c4

08000474 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	4a07      	ldr	r2, [pc, #28]	; (80004a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000484:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <vApplicationGetTimerTaskMemory+0x30>)
 800048a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000492:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	200002c4 	.word	0x200002c4
 80004a4:	20000318 	.word	0x20000318

080004a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b08a      	sub	sp, #40	; 0x28
 80004ac:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_FREERTOS_Init+0x4c>)
 80004b0:	623b      	str	r3, [r7, #32]
 80004b2:	2300      	movs	r3, #0
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	2200      	movs	r2, #0
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 ff66 	bl	8002390 <osTimerCreate>
 80004c4:	4603      	mov	r3, r0
 80004c6:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <MX_FREERTOS_Init+0x50>)
 80004c8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_FREERTOS_Init+0x54>)
 80004cc:	1d3c      	adds	r4, r7, #4
 80004ce:	461d      	mov	r5, r3
 80004d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fef4 	bl	80022ce <osThreadCreate>
 80004e6:	4603      	mov	r3, r0
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <MX_FREERTOS_Init+0x58>)
 80004ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	; 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bdb0      	pop	{r4, r5, r7, pc}
 80004f4:	08000529 	.word	0x08000529
 80004f8:	2000006c 	.word	0x2000006c
 80004fc:	08004dd4 	.word	0x08004dd4
 8000500:	20000068 	.word	0x20000068

08000504 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  AppTest_Init();
 800050c:	f7ff fe60 	bl	80001d0 <AppTest_Init>
  osTimerStart(periodicTimerHandle, 1000);
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <StartDefaultTask+0x20>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000518:	4618      	mov	r0, r3
 800051a:	f001 ff6d 	bl	80023f8 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	  AppTest_Loop();
 800051e:	f7ff fe5d 	bl	80001dc <AppTest_Loop>
 8000522:	e7fc      	b.n	800051e <StartDefaultTask+0x1a>
 8000524:	2000006c 	.word	0x2000006c

08000528 <PTCallback>:
  /* USER CODE END StartDefaultTask */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
  AppTest_CallEachSecond();
 8000530:	f7ff fe5a 	bl	80001e8 <AppTest_CallEachSecond>
  /* USER CODE END PTCallback */
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_GPIO_Init+0x94>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_GPIO_Init+0x94>)
 8000558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_GPIO_Init+0x94>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_GPIO_Init+0x94>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_GPIO_Init+0x94>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_GPIO_Init+0x94>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SERVO2_M2_Pin|SERVO2_M1_Pin|SERVO1_M4_Pin|SERVO1_M3_Pin
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0x98>)
 800058a:	f000 fc19 	bl	8000dc0 <HAL_GPIO_WritePin>
                          |SERVO1_M2_Pin|SERVO1_M1_Pin|SERVO2SPARE1_Pin|SAUCEPUMP3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_PR__5V_Pin;
 800058e:	2302      	movs	r3, #2
 8000590:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EXT_PR__5V_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	4619      	mov	r1, r3
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f000 fa7a 	bl	8000a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SERVO2_M2_Pin|SERVO2_M1_Pin|SERVO1_M4_Pin|SERVO1_M3_Pin
 80005a8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005ac:	60fb      	str	r3, [r7, #12]
                          |SERVO1_M2_Pin|SERVO1_M1_Pin|SERVO2SPARE1_Pin|SAUCEPUMP3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0x98>)
 80005c2:	f000 fa6b 	bl	8000a9c <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48001000 	.word	0x48001000

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 f8e6 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f807 	bl	80005f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ffaa 	bl	800053c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80005e8:	f7ff ff5e 	bl	80004a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005ec:	f001 fe68 	bl	80022c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x18>

080005f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b090      	sub	sp, #64	; 0x40
 80005f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f8:	f107 0318 	add.w	r3, r7, #24
 80005fc:	2228      	movs	r2, #40	; 0x28
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 fbcd 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000628:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fbf6 	bl	8000e24 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800063e:	f000 f819 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2302      	movs	r3, #2
 8000648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2102      	movs	r1, #2
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fc1f 	bl	8001ea0 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000668:	f000 f804 	bl	8000674 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3740      	adds	r7, #64	; 0x40
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	210f      	movs	r1, #15
 80006ba:	f06f 0001 	mvn.w	r0, #1
 80006be:	f000 f9b6 	bl	8000a2e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2105      	movs	r1, #5
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f9b1 	bl	8000a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f000 f9ca 	bl	8000a66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f892 	bl	8000838 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000714:	f003 fa54 	bl	8003bc0 <xTaskGetSchedulerState>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d001      	beq.n	8000722 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800071e:	f004 f8a3 	bl	8004868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line16.
  */
void PVD_IRQHandler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800072a:	f000 fb61 	bl	8000df0 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000790 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0b      	ldr	r4, [pc, #44]	; (80007a4 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000782:	f7ff ffd7 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000786:	f004 fad9 	bl	8004d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800078a:	f7ff ff25 	bl	80005d8 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000790:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 800079c:	08004e44 	.word	0x08004e44
  ldr r2, =_sbss
 80007a0:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80007a4:	200015a4 	.word	0x200015a4

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f92b 	bl	8000a18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	200f      	movs	r0, #15
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff ff5a 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f943 	bl	8000a82 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295
 8000814:	f000 f90b 	bl	8000a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000038 	.word	0x20000038
 8000830:	20000040 	.word	0x20000040
 8000834:	2000003c 	.word	0x2000003c

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_IncTick+0x20>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_IncTick+0x24>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_IncTick+0x24>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000040 	.word	0x20000040
 800085c:	20000718 	.word	0x20000718

08000860 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;  
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_GetTick+0x14>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000718 	.word	0x20000718

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <__NVIC_EnableIRQ+0x38>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100

08000918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	db0a      	blt.n	8000942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	490c      	ldr	r1, [pc, #48]	; (8000964 <__NVIC_SetPriority+0x4c>)
 8000932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000936:	0112      	lsls	r2, r2, #4
 8000938:	b2d2      	uxtb	r2, r2
 800093a:	440b      	add	r3, r1
 800093c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000940:	e00a      	b.n	8000958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4908      	ldr	r1, [pc, #32]	; (8000968 <__NVIC_SetPriority+0x50>)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f003 030f 	and.w	r3, r3, #15
 800094e:	3b04      	subs	r3, #4
 8000950:	0112      	lsls	r2, r2, #4
 8000952:	b2d2      	uxtb	r2, r2
 8000954:	440b      	add	r3, r1
 8000956:	761a      	strb	r2, [r3, #24]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800096c:	b480      	push	{r7}
 800096e:	b089      	sub	sp, #36	; 0x24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f1c3 0307 	rsb	r3, r3, #7
 8000986:	2b04      	cmp	r3, #4
 8000988:	bf28      	it	cs
 800098a:	2304      	movcs	r3, #4
 800098c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3304      	adds	r3, #4
 8000992:	2b06      	cmp	r3, #6
 8000994:	d902      	bls.n	800099c <NVIC_EncodePriority+0x30>
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3b03      	subs	r3, #3
 800099a:	e000      	b.n	800099e <NVIC_EncodePriority+0x32>
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a0:	f04f 32ff 	mov.w	r2, #4294967295
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43da      	mvns	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	401a      	ands	r2, r3
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b4:	f04f 31ff 	mov.w	r1, #4294967295
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	fa01 f303 	lsl.w	r3, r1, r3
 80009be:	43d9      	mvns	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	4313      	orrs	r3, r2
         );
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3724      	adds	r7, #36	; 0x24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e4:	d301      	bcc.n	80009ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00f      	b.n	8000a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ea:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <SysTick_Config+0x40>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009f2:	210f      	movs	r1, #15
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f7ff ff8e 	bl	8000918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <SysTick_Config+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <SysTick_Config+0x40>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff29 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
 8000a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a40:	f7ff ff3e 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6978      	ldr	r0, [r7, #20]
 8000a4c:	f7ff ff8e 	bl	800096c <NVIC_EncodePriority>
 8000a50:	4602      	mov	r2, r0
 8000a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff5d 	bl	8000918 <__NVIC_SetPriority>
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff31 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffa2 	bl	80009d4 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aaa:	e154      	b.n	8000d56 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 8146 	beq.w	8000d50 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d005      	beq.n	8000adc <HAL_GPIO_Init+0x40>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d130      	bne.n	8000b3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2203      	movs	r2, #3
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b12:	2201      	movs	r2, #1
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	091b      	lsrs	r3, r3, #4
 8000b28:	f003 0201 	and.w	r2, r3, #1
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d017      	beq.n	8000b7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d123      	bne.n	8000bce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	08da      	lsrs	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3208      	adds	r2, #8
 8000b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	6939      	ldr	r1, [r7, #16]
 8000bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0203 	and.w	r2, r3, #3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 80a0 	beq.w	8000d50 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c10:	4b58      	ldr	r3, [pc, #352]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a57      	ldr	r2, [pc, #348]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c28:	4a53      	ldr	r2, [pc, #332]	; (8000d78 <HAL_GPIO_Init+0x2dc>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	220f      	movs	r2, #15
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c52:	d019      	beq.n	8000c88 <HAL_GPIO_Init+0x1ec>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a49      	ldr	r2, [pc, #292]	; (8000d7c <HAL_GPIO_Init+0x2e0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <HAL_GPIO_Init+0x1e8>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a48      	ldr	r2, [pc, #288]	; (8000d80 <HAL_GPIO_Init+0x2e4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d00d      	beq.n	8000c80 <HAL_GPIO_Init+0x1e4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a47      	ldr	r2, [pc, #284]	; (8000d84 <HAL_GPIO_Init+0x2e8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d007      	beq.n	8000c7c <HAL_GPIO_Init+0x1e0>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a46      	ldr	r2, [pc, #280]	; (8000d88 <HAL_GPIO_Init+0x2ec>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d101      	bne.n	8000c78 <HAL_GPIO_Init+0x1dc>
 8000c74:	2304      	movs	r3, #4
 8000c76:	e008      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c78:	2305      	movs	r3, #5
 8000c7a:	e006      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	e004      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_Init+0x1ee>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	697a      	ldr	r2, [r7, #20]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	0092      	lsls	r2, r2, #2
 8000c92:	4093      	lsls	r3, r2
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c9a:	4937      	ldr	r1, [pc, #220]	; (8000d78 <HAL_GPIO_Init+0x2dc>)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	089b      	lsrs	r3, r3, #2
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca8:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf6:	4a25      	ldr	r2, [pc, #148]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d20:	4a1a      	ldr	r2, [pc, #104]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_GPIO_Init+0x2f0>)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f47f aea3 	bne.w	8000aac <HAL_GPIO_Init+0x10>
  }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010000 	.word	0x40010000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	48001000 	.word	0x48001000
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	887b      	ldrh	r3, [r7, #2]
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	e001      	b.n	8000db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ddc:	e002      	b.n	8000de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d005      	beq.n	8000e0c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8000e00:	f000 f808 	bl	8000e14 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_PWR_PVD_IRQHandler+0x20>)
 8000e06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e0a:	615a      	str	r2, [r3, #20]
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e34:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f001 b823 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 817d 	beq.w	800115a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e60:	4bbc      	ldr	r3, [pc, #752]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d00c      	beq.n	8000e86 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e6c:	4bb9      	ldr	r3, [pc, #740]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 030c 	and.w	r3, r3, #12
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d15c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x10e>
 8000e78:	4bb6      	ldr	r3, [pc, #728]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e84:	d155      	bne.n	8000f32 <HAL_RCC_OscConfig+0x10e>
 8000e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e8e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e92:	fa93 f3a3 	rbit	r3, r3
 8000e96:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e9a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	095b      	lsrs	r3, r3, #5
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d102      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x94>
 8000eb2:	4ba8      	ldr	r3, [pc, #672]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	e015      	b.n	8000ee4 <HAL_RCC_OscConfig+0xc0>
 8000eb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000ec4:	fa93 f3a3 	rbit	r3, r3
 8000ec8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000ed4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000ed8:	fa93 f3a3 	rbit	r3, r3
 8000edc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000ee0:	4b9c      	ldr	r3, [pc, #624]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ee8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000eec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ef0:	fa92 f2a2 	rbit	r2, r2
 8000ef4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000ef8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000efc:	fab2 f282 	clz	r2, r2
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	f042 0220 	orr.w	r2, r2, #32
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	f002 021f 	and.w	r2, r2, #31
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 811f 	beq.w	8001158 <HAL_RCC_OscConfig+0x334>
 8000f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 8116 	bne.w	8001158 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f000 bfaf 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f42:	d106      	bne.n	8000f52 <HAL_RCC_OscConfig+0x12e>
 8000f44:	4b83      	ldr	r3, [pc, #524]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a82      	ldr	r2, [pc, #520]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	e036      	b.n	8000fc0 <HAL_RCC_OscConfig+0x19c>
 8000f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x158>
 8000f62:	4b7c      	ldr	r3, [pc, #496]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7b      	ldr	r2, [pc, #492]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b79      	ldr	r3, [pc, #484]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a78      	ldr	r2, [pc, #480]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e021      	b.n	8000fc0 <HAL_RCC_OscConfig+0x19c>
 8000f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x184>
 8000f8e:	4b71      	ldr	r3, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a70      	ldr	r2, [pc, #448]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b6e      	ldr	r3, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6d      	ldr	r2, [pc, #436]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0x19c>
 8000fa8:	4b6a      	ldr	r3, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a69      	ldr	r2, [pc, #420]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b67      	ldr	r3, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a66      	ldr	r2, [pc, #408]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc0:	4b64      	ldr	r3, [pc, #400]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f023 020f 	bic.w	r2, r3, #15
 8000fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	495f      	ldr	r1, [pc, #380]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d059      	beq.n	800109e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fc39 	bl	8000860 <HAL_GetTick>
 8000fee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff2:	e00a      	b.n	800100a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc34 	bl	8000860 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d902      	bls.n	800100a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	f000 bf43 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 800100a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001016:	fa93 f3a3 	rbit	r3, r3
 800101a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800101e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	fab3 f383 	clz	r3, r3
 8001026:	b2db      	uxtb	r3, r3
 8001028:	095b      	lsrs	r3, r3, #5
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <HAL_RCC_OscConfig+0x218>
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	e015      	b.n	8001068 <HAL_RCC_OscConfig+0x244>
 800103c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001040:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001054:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001058:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001064:	4b3b      	ldr	r3, [pc, #236]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001070:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001074:	fa92 f2a2 	rbit	r2, r2
 8001078:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800107c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001080:	fab2 f282 	clz	r2, r2
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	f042 0220 	orr.w	r2, r2, #32
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f002 021f 	and.w	r2, r2, #31
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4013      	ands	r3, r2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0ab      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x1d0>
 800109c:	e05d      	b.n	800115a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fbdf 	bl	8000860 <HAL_GetTick>
 80010a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e00a      	b.n	80010be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fbda 	bl	8000860 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d902      	bls.n	80010be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	f000 bee9 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 80010be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80010d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	095b      	lsrs	r3, r3, #5
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <HAL_RCC_OscConfig+0x2cc>
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	e015      	b.n	800111c <HAL_RCC_OscConfig+0x2f8>
 80010f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001104:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001108:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800110c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_RCC_OscConfig+0x330>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001120:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001124:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001128:	fa92 f2a2 	rbit	r2, r2
 800112c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001130:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001134:	fab2 f282 	clz	r2, r2
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	f042 0220 	orr.w	r2, r2, #32
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f002 021f 	and.w	r2, r2, #31
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	4013      	ands	r3, r2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1ab      	bne.n	80010a8 <HAL_RCC_OscConfig+0x284>
 8001150:	e003      	b.n	800115a <HAL_RCC_OscConfig+0x336>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 817d 	beq.w	800146a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001170:	4ba6      	ldr	r3, [pc, #664]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800117c:	4ba3      	ldr	r3, [pc, #652]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d172      	bne.n	800126e <HAL_RCC_OscConfig+0x44a>
 8001188:	4ba0      	ldr	r3, [pc, #640]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d16c      	bne.n	800126e <HAL_RCC_OscConfig+0x44a>
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	095b      	lsrs	r3, r3, #5
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <HAL_RCC_OscConfig+0x3a0>
 80011be:	4b93      	ldr	r3, [pc, #588]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	e013      	b.n	80011ec <HAL_RCC_OscConfig+0x3c8>
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80011ce:	fa93 f3a3 	rbit	r3, r3
 80011d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80011dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80011e8:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2202      	movs	r2, #2
 80011ee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80011f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80011f6:	fa92 f2a2 	rbit	r2, r2
 80011fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80011fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001202:	fab2 f282 	clz	r2, r2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	f042 0220 	orr.w	r2, r2, #32
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	f002 021f 	and.w	r2, r2, #31
 8001212:	2101      	movs	r1, #1
 8001214:	fa01 f202 	lsl.w	r2, r1, r2
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00a      	beq.n	8001234 <HAL_RCC_OscConfig+0x410>
 800121e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001222:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d002      	beq.n	8001234 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	f000 be2e 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b75      	ldr	r3, [pc, #468]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001240:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	21f8      	movs	r1, #248	; 0xf8
 800124a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001252:	fa91 f1a1 	rbit	r1, r1
 8001256:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800125a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800125e:	fab1 f181 	clz	r1, r1
 8001262:	b2c9      	uxtb	r1, r1
 8001264:	408b      	lsls	r3, r1
 8001266:	4969      	ldr	r1, [pc, #420]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001268:	4313      	orrs	r3, r2
 800126a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126c:	e0fd      	b.n	800146a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8088 	beq.w	8001390 <HAL_RCC_OscConfig+0x56c>
 8001280:	2301      	movs	r3, #1
 8001282:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001286:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800128a:	fa93 f3a3 	rbit	r3, r3
 800128e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001292:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	461a      	mov	r2, r3
 80012a8:	2301      	movs	r3, #1
 80012aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fad8 	bl	8000860 <HAL_GetTick>
 80012b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	e00a      	b.n	80012cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fad3 	bl	8000860 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d902      	bls.n	80012cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	f000 bde2 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80012de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d102      	bne.n	80012fc <HAL_RCC_OscConfig+0x4d8>
 80012f6:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	e013      	b.n	8001324 <HAL_RCC_OscConfig+0x500>
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001314:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2202      	movs	r2, #2
 8001326:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800132a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800132e:	fa92 f2a2 	rbit	r2, r2
 8001332:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001336:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800133a:	fab2 f282 	clz	r2, r2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	f042 0220 	orr.w	r2, r2, #32
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f002 021f 	and.w	r2, r2, #31
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f202 	lsl.w	r2, r1, r2
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0af      	beq.n	80012b6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	21f8      	movs	r1, #248	; 0xf8
 800136c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001374:	fa91 f1a1 	rbit	r1, r1
 8001378:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800137c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001380:	fab1 f181 	clz	r1, r1
 8001384:	b2c9      	uxtb	r1, r1
 8001386:	408b      	lsls	r3, r1
 8001388:	4920      	ldr	r1, [pc, #128]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
 800138e:	e06c      	b.n	800146a <HAL_RCC_OscConfig+0x646>
 8001390:	2301      	movs	r3, #1
 8001392:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	fab3 f383 	clz	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	461a      	mov	r2, r3
 80013b8:	2300      	movs	r3, #0
 80013ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fa50 	bl	8000860 <HAL_GetTick>
 80013c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fa4b 	bl	8000860 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d902      	bls.n	80013dc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f000 bd5a 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80013ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d104      	bne.n	8001410 <HAL_RCC_OscConfig+0x5ec>
 8001406:	4b01      	ldr	r3, [pc, #4]	; (800140c <HAL_RCC_OscConfig+0x5e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e015      	b.n	8001438 <HAL_RCC_OscConfig+0x614>
 800140c:	40021000 	.word	0x40021000
 8001410:	2302      	movs	r3, #2
 8001412:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001428:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001434:	4bc8      	ldr	r3, [pc, #800]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800143e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001442:	fa92 f2a2 	rbit	r2, r2
 8001446:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800144a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800144e:	fab2 f282 	clz	r2, r2
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	f042 0220 	orr.w	r2, r2, #32
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	f002 021f 	and.w	r2, r2, #31
 800145e:	2101      	movs	r1, #1
 8001460:	fa01 f202 	lsl.w	r2, r1, r2
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ad      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8110 	beq.w	80016a0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d079      	beq.n	8001584 <HAL_RCC_OscConfig+0x760>
 8001490:	2301      	movs	r3, #1
 8001492:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4bab      	ldr	r3, [pc, #684]	; (800175c <HAL_RCC_OscConfig+0x938>)
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	461a      	mov	r2, r3
 80014b6:	2301      	movs	r3, #1
 80014b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ba:	f7ff f9d1 	bl	8000860 <HAL_GetTick>
 80014be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e00a      	b.n	80014da <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff f9cc 	bl	8000860 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d902      	bls.n	80014da <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f000 bcdb 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014f4:	2202      	movs	r2, #2
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	fa93 f2a3 	rbit	r2, r3
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001518:	2202      	movs	r2, #2
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	fa93 f2a3 	rbit	r2, r3
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001532:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 8001536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001540:	2102      	movs	r1, #2
 8001542:	6019      	str	r1, [r3, #0]
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f1a3 	rbit	r1, r3
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800155a:	6019      	str	r1, [r3, #0]
  return result;
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0a0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x6a0>
 8001582:	e08d      	b.n	80016a0 <HAL_RCC_OscConfig+0x87c>
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f2a3 	rbit	r2, r3
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015a6:	601a      	str	r2, [r3, #0]
  return result;
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015b0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x938>)
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	461a      	mov	r2, r3
 80015c2:	2300      	movs	r3, #0
 80015c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff f94b 	bl	8000860 <HAL_GetTick>
 80015ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff f946 	bl	8000860 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d902      	bls.n	80015e6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	f000 bc55 	b.w	8001e90 <HAL_RCC_OscConfig+0x106c>
 80015e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fa93 f2a3 	rbit	r2, r3
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800161a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fa93 f2a3 	rbit	r2, r3
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001636:	2202      	movs	r2, #2
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001650:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 8001654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800165e:	2102      	movs	r1, #2
 8001660:	6019      	str	r1, [r3, #0]
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f1a3 	rbit	r1, r3
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001678:	6019      	str	r1, [r3, #0]
  return result;
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fab3 f383 	clz	r3, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	2101      	movs	r1, #1
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d197      	bne.n	80015d0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 81a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016bc:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d116      	bne.n	80016f6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d2:	61d3      	str	r3, [r2, #28]
 80016d4:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80016ee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_RCC_OscConfig+0x93c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11a      	bne.n	8001738 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_RCC_OscConfig+0x93c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a16      	ldr	r2, [pc, #88]	; (8001760 <HAL_RCC_OscConfig+0x93c>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff f8a7 	bl	8000860 <HAL_GetTick>
 8001712:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001716:	e009      	b.n	800172c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001718:	f7ff f8a2 	bl	8000860 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e3b1      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_RCC_OscConfig+0x93c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10d      	bne.n	8001764 <HAL_RCC_OscConfig+0x940>
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <HAL_RCC_OscConfig+0x934>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e03c      	b.n	80017d0 <HAL_RCC_OscConfig+0x9ac>
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	10908120 	.word	0x10908120
 8001760:	40007000 	.word	0x40007000
 8001764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001768:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x96a>
 8001774:	4bc1      	ldr	r3, [pc, #772]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4ac0      	ldr	r2, [pc, #768]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 800177a:	f023 0301 	bic.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4bbe      	ldr	r3, [pc, #760]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4abd      	ldr	r2, [pc, #756]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001786:	f023 0304 	bic.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	e020      	b.n	80017d0 <HAL_RCC_OscConfig+0x9ac>
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b05      	cmp	r3, #5
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x994>
 800179e:	4bb7      	ldr	r3, [pc, #732]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4ab6      	ldr	r2, [pc, #728]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
 80017aa:	4bb4      	ldr	r3, [pc, #720]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4ab3      	ldr	r2, [pc, #716]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0x9ac>
 80017b8:	4bb0      	ldr	r3, [pc, #704]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4aaf      	ldr	r2, [pc, #700]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4bad      	ldr	r3, [pc, #692]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4aac      	ldr	r2, [pc, #688]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80017ca:	f023 0304 	bic.w	r3, r3, #4
 80017ce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8081 	beq.w	80018e4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e2:	f7ff f83d 	bl	8000860 <HAL_GetTick>
 80017e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff f838 	bl	8000860 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e345      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
 8001804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001808:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	fa93 f2a3 	rbit	r2, r3
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001830:	2202      	movs	r2, #2
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fa93 f2a3 	rbit	r2, r3
 8001842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001846:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800184a:	601a      	str	r2, [r3, #0]
  return result;
 800184c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001850:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001854:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	095b      	lsrs	r3, r3, #5
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d102      	bne.n	8001870 <HAL_RCC_OscConfig+0xa4c>
 800186a:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	e013      	b.n	8001898 <HAL_RCC_OscConfig+0xa74>
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	4b79      	ldr	r3, [pc, #484]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800189c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018a0:	2102      	movs	r1, #2
 80018a2:	6011      	str	r1, [r2, #0]
 80018a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018ac:	6812      	ldr	r2, [r2, #0]
 80018ae:	fa92 f1a2 	rbit	r1, r2
 80018b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018ba:	6011      	str	r1, [r2, #0]
  return result;
 80018bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	fab2 f282 	clz	r2, r2
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	f002 021f 	and.w	r2, r2, #31
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	4013      	ands	r3, r2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d084      	beq.n	80017ec <HAL_RCC_OscConfig+0x9c8>
 80018e2:	e07f      	b.n	80019e4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7fe ffbc 	bl	8000860 <HAL_GetTick>
 80018e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7fe ffb7 	bl	8000860 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2c4      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001916:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	fa93 f2a3 	rbit	r2, r3
 8001920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001924:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001932:	2202      	movs	r2, #2
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	fa93 f2a3 	rbit	r2, r3
 8001944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001948:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800194c:	601a      	str	r2, [r3, #0]
  return result;
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001956:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	095b      	lsrs	r3, r3, #5
 8001960:	b2db      	uxtb	r3, r3
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d102      	bne.n	8001972 <HAL_RCC_OscConfig+0xb4e>
 800196c:	4b43      	ldr	r3, [pc, #268]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	e013      	b.n	800199a <HAL_RCC_OscConfig+0xb76>
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800199e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019a2:	2102      	movs	r1, #2
 80019a4:	6011      	str	r1, [r2, #0]
 80019a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	fa92 f1a2 	rbit	r1, r2
 80019b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019bc:	6011      	str	r1, [r2, #0]
  return result;
 80019be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019c2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	fab2 f282 	clz	r2, r2
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	f002 021f 	and.w	r2, r2, #31
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d184      	bne.n	80018ee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 80019f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8242 	beq.w	8001e8e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <HAL_RCC_OscConfig+0xc58>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	f000 8213 	beq.w	8001e3e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f040 8162 	bne.w	8001cee <HAL_RCC_OscConfig+0xeca>
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a4e:	601a      	str	r2, [r3, #0]
  return result;
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001a58:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	fab3 f383 	clz	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a64:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe fef6 	bl	8000860 <HAL_GetTick>
 8001a74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	e00c      	b.n	8001a94 <HAL_RCC_OscConfig+0xc70>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a80:	f7fe feee 	bl	8000860 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
 8001a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a98:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ab8:	601a      	str	r2, [r3, #0]
  return result;
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ac2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0xcba>
 8001ad8:	4bb0      	ldr	r3, [pc, #704]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e027      	b.n	8001b2e <HAL_RCC_OscConfig+0xd0a>
 8001ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ae6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b08:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	4b9c      	ldr	r3, [pc, #624]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b32:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b36:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b3a:	6011      	str	r1, [r2, #0]
 8001b3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b40:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	fa92 f1a2 	rbit	r1, r2
 8001b4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b4e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b52:	6011      	str	r1, [r2, #0]
  return result;
 8001b54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b58:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d182      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	430b      	orrs	r3, r1
 8001b9c:	497f      	ldr	r1, [pc, #508]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001baa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bc6:	601a      	str	r2, [r3, #0]
  return result;
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001bd0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	461a      	mov	r2, r3
 8001be4:	2301      	movs	r3, #1
 8001be6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7fe fe3a 	bl	8000860 <HAL_GetTick>
 8001bec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	e009      	b.n	8001c06 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe fe35 	bl	8000860 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e144      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
 8001c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c18:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c26:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c30:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0xe2c>
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e027      	b.n	8001ca0 <HAL_RCC_OscConfig+0xe7c>
 8001c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c54:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ca4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cb2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cc0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cc4:	6011      	str	r1, [r2, #0]
  return result;
 8001cc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	f002 021f 	and.w	r2, r2, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d082      	beq.n	8001bf2 <HAL_RCC_OscConfig+0xdce>
 8001cec:	e0cf      	b.n	8001e8e <HAL_RCC_OscConfig+0x106a>
 8001cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d12:	601a      	str	r2, [r3, #0]
  return result;
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d1c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe fd94 	bl	8000860 <HAL_GetTick>
 8001d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	e009      	b.n	8001d52 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7fe fd8f 	bl	8000860 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e09e      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d76:	601a      	str	r2, [r3, #0]
  return result;
 8001d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001d80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d104      	bne.n	8001da0 <HAL_RCC_OscConfig+0xf7c>
 8001d96:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <HAL_RCC_OscConfig+0xf78>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	e029      	b.n	8001df0 <HAL_RCC_OscConfig+0xfcc>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	fa93 f2a3 	rbit	r2, r3
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	fa93 f2a3 	rbit	r2, r3
 8001de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <HAL_RCC_OscConfig+0x1078>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001df4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001df8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dfc:	6011      	str	r1, [r2, #0]
 8001dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e02:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	fa92 f1a2 	rbit	r1, r2
 8001e0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e10:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e14:	6011      	str	r1, [r2, #0]
  return result;
 8001e16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e1a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fab2 f282 	clz	r2, r2
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f002 021f 	and.w	r2, r2, #31
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f202 	lsl.w	r2, r1, r2
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d180      	bne.n	8001d3e <HAL_RCC_OscConfig+0xf1a>
 8001e3c:	e027      	b.n	8001e8e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01e      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_OscConfig+0x1078>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e5e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b09e      	sub	sp, #120	; 0x78
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e162      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b90      	ldr	r3, [pc, #576]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b8d      	ldr	r3, [pc, #564]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	498b      	ldr	r1, [pc, #556]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e14a      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	497f      	ldr	r1, [pc, #508]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80dc 	beq.w	80020cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d13c      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xf6>
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xa6>
 8001f40:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e00f      	b.n	8001f66 <HAL_RCC_ClockConfig+0xc6>
 8001f46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	667b      	str	r3, [r7, #100]	; 0x64
 8001f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f6e:	fa92 f2a2 	rbit	r2, r2
 8001f72:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0220 	orr.w	r2, r2, #32
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d17b      	bne.n	800208a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e0f3      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d13c      	bne.n	8002018 <HAL_RCC_ClockConfig+0x178>
 8001f9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x128>
 8001fc2:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_ClockConfig+0x148>
 8001fc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fcc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
 8001fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fec:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ff0:	fa92 f2a2 	rbit	r2, r2
 8001ff4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff8:	fab2 f282 	clz	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f042 0220 	orr.w	r2, r2, #32
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f002 021f 	and.w	r2, r2, #31
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d13a      	bne.n	800208a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b2      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
 8002018:	2302      	movs	r3, #2
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	fa93 f3a3 	rbit	r3, r3
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002026:	fab3 f383 	clz	r3, r3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	b2db      	uxtb	r3, r3
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d102      	bne.n	8002040 <HAL_RCC_ClockConfig+0x1a0>
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e00d      	b.n	800205c <HAL_RCC_ClockConfig+0x1bc>
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	2302      	movs	r3, #2
 800204e:	623b      	str	r3, [r7, #32]
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2202      	movs	r2, #2
 800205e:	61ba      	str	r2, [r7, #24]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	617a      	str	r2, [r7, #20]
  return result;
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e079      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	491a      	ldr	r1, [pc, #104]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800209c:	f7fe fbe0 	bl	8000860 <HAL_GetTick>
 80020a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fbdc 	bl	8000860 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e061      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d214      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4906      	ldr	r1, [pc, #24]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e040      	b.n	800217e <HAL_RCC_ClockConfig+0x2de>
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_RCC_ClockConfig+0x2e8>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	491a      	ldr	r1, [pc, #104]	; (8002188 <HAL_RCC_ClockConfig+0x2e8>)
 800211e:	4313      	orrs	r3, r2
 8002120:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x2e8>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4912      	ldr	r1, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x2e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002142:	f000 f829 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002146:	4601      	mov	r1, r0
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <HAL_RCC_ClockConfig+0x2e8>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002150:	22f0      	movs	r2, #240	; 0xf0
 8002152:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	fa92 f2a2 	rbit	r2, r2
 800215a:	60fa      	str	r2, [r7, #12]
  return result;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	fab2 f282 	clz	r2, r2
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	40d3      	lsrs	r3, r2
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x2ec>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	fa21 f303 	lsr.w	r3, r1, r3
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_RCC_ClockConfig+0x2f0>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x2f4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fb2e 	bl	80007d8 <HAL_InitTick>
  
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3778      	adds	r7, #120	; 0x78
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	08004e0c 	.word	0x08004e0c
 8002190:	20000038 	.word	0x20000038
 8002194:	2000003c 	.word	0x2000003c

08002198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	b480      	push	{r7}
 800219a:	b08b      	sub	sp, #44	; 0x2c
 800219c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	2300      	movs	r3, #0
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021b2:	4b29      	ldr	r3, [pc, #164]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x30>
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x36>
 80021c6:	e03c      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021ca:	623b      	str	r3, [r7, #32]
      break;
 80021cc:	e03c      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	fa92 f2a2 	rbit	r2, r2
 80021e0:	607a      	str	r2, [r7, #4]
  return result;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	220f      	movs	r2, #15
 80021fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	fa92 f2a2 	rbit	r2, r2
 8002204:	60fa      	str	r2, [r7, #12]
  return result;
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	fab2 f282 	clz	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	40d3      	lsrs	r3, r2
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002220:	4a0e      	ldr	r2, [pc, #56]	; (800225c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	fbb2 f2f3 	udiv	r2, r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	e004      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	623b      	str	r3, [r7, #32]
      break;
 8002240:	e002      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002244:	623b      	str	r3, [r7, #32]
      break;
 8002246:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002248:	6a3b      	ldr	r3, [r7, #32]
}
 800224a:	4618      	mov	r0, r3
 800224c:	372c      	adds	r7, #44	; 0x2c
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	007a1200 	.word	0x007a1200
 8002260:	08004e1c 	.word	0x08004e1c
 8002264:	08004e2c 	.word	0x08004e2c
 8002268:	003d0900 	.word	0x003d0900

0800226c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800227a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227e:	2b84      	cmp	r3, #132	; 0x84
 8002280:	d005      	beq.n	800228e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002282:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	3303      	adds	r3, #3
 800228c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a2:	f3ef 8305 	mrs	r3, IPSR
 80022a6:	607b      	str	r3, [r7, #4]
  return(result);
 80022a8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80022c4:	f001 f830 	bl	8003328 <vTaskStartScheduler>
  
  return osOK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}

080022ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80022ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d0:	b089      	sub	sp, #36	; 0x24
 80022d2:	af04      	add	r7, sp, #16
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <osThreadCreate+0x54>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685c      	ldr	r4, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681d      	ldr	r5, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691e      	ldr	r6, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffb6 	bl	800226c <makeFreeRtosPriority>
 8002300:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800230a:	9202      	str	r2, [sp, #8]
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9100      	str	r1, [sp, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4632      	mov	r2, r6
 8002314:	4629      	mov	r1, r5
 8002316:	4620      	mov	r0, r4
 8002318:	f000 fe48 	bl	8002fac <xTaskCreateStatic>
 800231c:	4603      	mov	r3, r0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e01c      	b.n	800235c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685c      	ldr	r4, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800232e:	b29e      	uxth	r6, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff98 	bl	800226c <makeFreeRtosPriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4632      	mov	r2, r6
 800234a:	4629      	mov	r1, r5
 800234c:	4620      	mov	r0, r4
 800234e:	f000 fe89 	bl	8003064 <xTaskCreate>
 8002352:	4603      	mov	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d001      	beq.n	800235c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002366 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <osDelay+0x16>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	e000      	b.n	800237e <osDelay+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f000 ff9e 	bl	80032c0 <vTaskDelay>
  
  return osOK;
 8002384:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	460b      	mov	r3, r1
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d013      	beq.n	80023ce <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80023a6:	7afb      	ldrb	r3, [r7, #11]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <osTimerCreate+0x20>
 80023ac:	2101      	movs	r1, #1
 80023ae:	e000      	b.n	80023b2 <osTimerCreate+0x22>
 80023b0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80023ba:	9201      	str	r2, [sp, #4]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	460a      	mov	r2, r1
 80023c2:	2101      	movs	r1, #1
 80023c4:	480b      	ldr	r0, [pc, #44]	; (80023f4 <osTimerCreate+0x64>)
 80023c6:	f001 fd6e 	bl	8003ea6 <xTimerCreateStatic>
 80023ca:	4603      	mov	r3, r0
 80023cc:	e00e      	b.n	80023ec <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <osTimerCreate+0x48>
 80023d4:	2201      	movs	r2, #1
 80023d6:	e000      	b.n	80023da <osTimerCreate+0x4a>
 80023d8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4803      	ldr	r0, [pc, #12]	; (80023f4 <osTimerCreate+0x64>)
 80023e6:	f001 fd3d 	bl	8003e64 <xTimerCreate>
 80023ea:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08004df0 	.word	0x08004df0

080023f8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <osTimerStart+0x20>
    ticks = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002418:	f7ff ff40 	bl	800229c <inHandlerMode>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01a      	beq.n	8002458 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2200      	movs	r2, #0
 8002428:	9200      	str	r2, [sp, #0]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	2109      	movs	r1, #9
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f001 fda8 	bl	8003f84 <xTimerGenericCommand>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d002      	beq.n	8002440 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800243a:	23ff      	movs	r3, #255	; 0xff
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e018      	b.n	8002472 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <osTimerStart+0x7a>
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <osTimerStart+0x84>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	e00c      	b.n	8002472 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2300      	movs	r3, #0
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	2104      	movs	r1, #4
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f001 fd8e 	bl	8003f84 <xTimerGenericCommand>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <osTimerStart+0x7a>
      result = osErrorOS;
 800246e:	23ff      	movs	r3, #255	; 0xff
 8002470:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002472:	697b      	ldr	r3, [r7, #20]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	e000ed04 	.word	0xe000ed04

08002480 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 0208 	add.w	r2, r3, #8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0208 	add.w	r2, r3, #8
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0208 	add.w	r2, r3, #8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	601a      	str	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d103      	bne.n	8002542 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e00c      	b.n	800255c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3308      	adds	r3, #8
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e002      	b.n	8002550 <vListInsert+0x2e>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	429a      	cmp	r2, r3
 800255a:	d2f6      	bcs.n	800254a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	601a      	str	r2, [r3, #0]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6852      	ldr	r2, [r2, #4]
 80025b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d103      	bne.n	80025c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002612:	f002 f897 	bl	8004744 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	441a      	add	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	3b01      	subs	r3, #1
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	441a      	add	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	; 0xff
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d114      	bne.n	8002692 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01a      	beq.n	80026a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3310      	adds	r3, #16
 8002674:	4618      	mov	r0, r3
 8002676:	f001 f8e1 	bl	800383c <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <xQueueGenericReset+0xcc>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e009      	b.n	80026a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3310      	adds	r3, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fef2 	bl	8002480 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff feed 	bl	8002480 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80026a6:	f002 f87d 	bl	80047a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026de:	bf00      	nop
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <xQueueGenericCreateStatic+0x52>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <xQueueGenericCreateStatic+0x56>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericCreateStatic+0x58>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	f383 8811 	msr	BASEPRI, r3
 800271c:	f3bf 8f6f 	isb	sy
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	623b      	str	r3, [r7, #32]
}
 8002726:	bf00      	nop
 8002728:	e7fe      	b.n	8002728 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <xQueueGenericCreateStatic+0x7e>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <xQueueGenericCreateStatic+0x82>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <xQueueGenericCreateStatic+0x84>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	61fb      	str	r3, [r7, #28]
}
 8002752:	bf00      	nop
 8002754:	e7fe      	b.n	8002754 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002756:	2348      	movs	r3, #72	; 0x48
 8002758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b48      	cmp	r3, #72	; 0x48
 800275e:	d00a      	beq.n	8002776 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
}
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002788:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f805 	bl	80027a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800279e:	4618      	mov	r0, r3
 80027a0:	3730      	adds	r7, #48	; 0x30
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e002      	b.n	80027c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027d4:	2101      	movs	r1, #1
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f7ff ff06 	bl	80025e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericSend+0x32>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <xQueueGenericSend+0x40>
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <xQueueGenericSend+0x44>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <xQueueGenericSend+0x46>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <xQueueGenericSend+0x60>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d103      	bne.n	8002852 <xQueueGenericSend+0x6e>
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <xQueueGenericSend+0x72>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericSend+0x74>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueGenericSend+0x8e>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002872:	f001 f9a5 	bl	8003bc0 <xTaskGetSchedulerState>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <xQueueGenericSend+0x9e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <xQueueGenericSend+0xa2>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <xQueueGenericSend+0xa4>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61fb      	str	r3, [r7, #28]
}
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028a2:	f001 ff4f 	bl	8004744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d302      	bcc.n	80028b8 <xQueueGenericSend+0xd4>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d129      	bne.n	800290c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028be:	f000 fa07 	bl	8002cd0 <prvCopyDataToQueue>
 80028c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d010      	beq.n	80028ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	3324      	adds	r3, #36	; 0x24
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 ffb3 	bl	800383c <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028dc:	4b3f      	ldr	r3, [pc, #252]	; (80029dc <xQueueGenericSend+0x1f8>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	e00a      	b.n	8002904 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028f4:	4b39      	ldr	r3, [pc, #228]	; (80029dc <xQueueGenericSend+0x1f8>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002904:	f001 ff4e 	bl	80047a4 <vPortExitCritical>
				return pdPASS;
 8002908:	2301      	movs	r3, #1
 800290a:	e063      	b.n	80029d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d103      	bne.n	800291a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002912:	f001 ff47 	bl	80047a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002916:	2300      	movs	r3, #0
 8002918:	e05c      	b.n	80029d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4618      	mov	r0, r3
 8002926:	f000 ffeb 	bl	8003900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800292a:	2301      	movs	r3, #1
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800292e:	f001 ff39 	bl	80047a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002932:	f000 fd5f 	bl	80033f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002936:	f001 ff05 	bl	8004744 <vPortEnterCritical>
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002940:	b25b      	sxtb	r3, r3
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d103      	bne.n	8002950 <xQueueGenericSend+0x16c>
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002956:	b25b      	sxtb	r3, r3
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d103      	bne.n	8002966 <xQueueGenericSend+0x182>
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002966:	f001 ff1d 	bl	80047a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800296a:	1d3a      	adds	r2, r7, #4
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4611      	mov	r1, r2
 8002972:	4618      	mov	r0, r3
 8002974:	f000 ffda 	bl	800392c <xTaskCheckForTimeOut>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d124      	bne.n	80029c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800297e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002980:	f000 fa9e 	bl	8002ec0 <prvIsQueueFull>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d018      	beq.n	80029bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	3310      	adds	r3, #16
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 ff02 	bl	800379c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299a:	f000 fa29 	bl	8002df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800299e:	f000 fd37 	bl	8003410 <xTaskResumeAll>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f af7c 	bne.w	80028a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <xQueueGenericSend+0x1f8>)
 80029ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	e772      	b.n	80028a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029be:	f000 fa17 	bl	8002df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029c2:	f000 fd25 	bl	8003410 <xTaskResumeAll>
 80029c6:	e76c      	b.n	80028a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ca:	f000 fa11 	bl	8002df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ce:	f000 fd1f 	bl	8003410 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029d2:	2300      	movs	r3, #0
		}
	}
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3738      	adds	r7, #56	; 0x38
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10a      	bne.n	8002a0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a0a:	bf00      	nop
 8002a0c:	e7fe      	b.n	8002a0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <xQueueGenericSendFromISR+0x3c>
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <xQueueGenericSendFromISR+0x40>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <xQueueGenericSendFromISR+0x42>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10a      	bne.n	8002a3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	623b      	str	r3, [r7, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d103      	bne.n	8002a4a <xQueueGenericSendFromISR+0x6a>
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <xQueueGenericSendFromISR+0x6e>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <xQueueGenericSendFromISR+0x70>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	61fb      	str	r3, [r7, #28]
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a6a:	f001 ff4d 	bl	8004908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a6e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	61ba      	str	r2, [r7, #24]
 8002a84:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a86:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <xQueueGenericSendFromISR+0xbc>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d12c      	bne.n	8002af6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aac:	f000 f910 	bl	8002cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ab0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d112      	bne.n	8002ae0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	3324      	adds	r3, #36	; 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 feb8 	bl	800383c <xTaskRemoveFromEventList>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00e      	beq.n	8002af0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00b      	beq.n	8002af0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e007      	b.n	8002af0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	b25a      	sxtb	r2, r3
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002af4:	e001      	b.n	8002afa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
 8002afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3738      	adds	r7, #56	; 0x38
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	; 0x30
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <xQueueReceive+0x30>
	__asm volatile
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	623b      	str	r3, [r7, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	e7fe      	b.n	8002b3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <xQueueReceive+0x3e>
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <xQueueReceive+0x42>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <xQueueReceive+0x44>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueReceive+0x5e>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	61fb      	str	r3, [r7, #28]
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b6e:	f001 f827 	bl	8003bc0 <xTaskGetSchedulerState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d102      	bne.n	8002b7e <xQueueReceive+0x6e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <xQueueReceive+0x72>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <xQueueReceive+0x74>
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <xQueueReceive+0x8e>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61bb      	str	r3, [r7, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	e7fe      	b.n	8002b9c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b9e:	f001 fdd1 	bl	8004744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01f      	beq.n	8002bee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bae:	68b9      	ldr	r1, [r7, #8]
 8002bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb2:	f000 f8f7 	bl	8002da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	1e5a      	subs	r2, r3, #1
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00f      	beq.n	8002be6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	3310      	adds	r3, #16
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fe36 	bl	800383c <xTaskRemoveFromEventList>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <xQueueReceive+0x1bc>)
 8002bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002be6:	f001 fddd 	bl	80047a4 <vPortExitCritical>
				return pdPASS;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e069      	b.n	8002cc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d103      	bne.n	8002bfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bf4:	f001 fdd6 	bl	80047a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e062      	b.n	8002cc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fe7a 	bl	8003900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c10:	f001 fdc8 	bl	80047a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c14:	f000 fbee 	bl	80033f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c18:	f001 fd94 	bl	8004744 <vPortEnterCritical>
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d103      	bne.n	8002c32 <xQueueReceive+0x122>
 8002c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c38:	b25b      	sxtb	r3, r3
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d103      	bne.n	8002c48 <xQueueReceive+0x138>
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c48:	f001 fdac 	bl	80047a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c4c:	1d3a      	adds	r2, r7, #4
 8002c4e:	f107 0310 	add.w	r3, r7, #16
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fe69 	bl	800392c <xTaskCheckForTimeOut>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d123      	bne.n	8002ca8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c62:	f000 f917 	bl	8002e94 <prvIsQueueEmpty>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d017      	beq.n	8002c9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	3324      	adds	r3, #36	; 0x24
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fd91 	bl	800379c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c7c:	f000 f8b8 	bl	8002df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c80:	f000 fbc6 	bl	8003410 <xTaskResumeAll>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d189      	bne.n	8002b9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <xQueueReceive+0x1bc>)
 8002c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	e780      	b.n	8002b9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c9e:	f000 f8a7 	bl	8002df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ca2:	f000 fbb5 	bl	8003410 <xTaskResumeAll>
 8002ca6:	e77a      	b.n	8002b9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002caa:	f000 f8a1 	bl	8002df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cae:	f000 fbaf 	bl	8003410 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb4:	f000 f8ee 	bl	8002e94 <prvIsQueueEmpty>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f43f af6f 	beq.w	8002b9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3730      	adds	r7, #48	; 0x30
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	e000ed04 	.word	0xe000ed04

08002cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d14d      	bne.n	8002d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 ff7e 	bl	8003bfc <xTaskPriorityDisinherit>
 8002d00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	e043      	b.n	8002d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d119      	bne.n	8002d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6898      	ldr	r0, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	f002 f832 	bl	8004d84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	441a      	add	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689a      	ldr	r2, [r3, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d32b      	bcc.n	8002d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	e026      	b.n	8002d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68d8      	ldr	r0, [r3, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	f002 f818 	bl	8004d84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	441a      	add	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d207      	bcs.n	8002d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	425b      	negs	r3, r3
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d105      	bne.n	8002d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d9a:	697b      	ldr	r3, [r7, #20]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d018      	beq.n	8002de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	441a      	add	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d303      	bcc.n	8002dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68d9      	ldr	r1, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	461a      	mov	r2, r3
 8002de2:	6838      	ldr	r0, [r7, #0]
 8002de4:	f001 ffce 	bl	8004d84 <memcpy>
	}
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002df8:	f001 fca4 	bl	8004744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e04:	e011      	b.n	8002e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3324      	adds	r3, #36	; 0x24
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fd12 	bl	800383c <xTaskRemoveFromEventList>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e1e:	f000 fde7 	bl	80039f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	dce9      	bgt.n	8002e06 <prvUnlockQueue+0x16>
 8002e32:	e000      	b.n	8002e36 <prvUnlockQueue+0x46>
					break;
 8002e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e3e:	f001 fcb1 	bl	80047a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e42:	f001 fc7f 	bl	8004744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e4e:	e011      	b.n	8002e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d012      	beq.n	8002e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fced 	bl	800383c <xTaskRemoveFromEventList>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e68:	f000 fdc2 	bl	80039f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e6c:	7bbb      	ldrb	r3, [r7, #14]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	dce9      	bgt.n	8002e50 <prvUnlockQueue+0x60>
 8002e7c:	e000      	b.n	8002e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	22ff      	movs	r2, #255	; 0xff
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e88:	f001 fc8c 	bl	80047a4 <vPortExitCritical>
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e9c:	f001 fc52 	bl	8004744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d102      	bne.n	8002eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e001      	b.n	8002eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eb2:	f001 fc77 	bl	80047a4 <vPortExitCritical>

	return xReturn;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ec8:	f001 fc3c 	bl	8004744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d102      	bne.n	8002ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e001      	b.n	8002ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ee2:	f001 fc5f 	bl	80047a4 <vPortExitCritical>

	return xReturn;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e014      	b.n	8002f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <vQueueAddToRegistry+0x50>)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <vQueueAddToRegistry+0x50>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <vQueueAddToRegistry+0x50>)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f22:	e006      	b.n	8002f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	d9e7      	bls.n	8002f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	2000071c 	.word	0x2000071c

08002f44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f54:	f001 fbf6 	bl	8004744 <vPortEnterCritical>
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d103      	bne.n	8002f6e <vQueueWaitForMessageRestricted+0x2a>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d103      	bne.n	8002f84 <vQueueWaitForMessageRestricted+0x40>
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f84:	f001 fc0e 	bl	80047a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3324      	adds	r3, #36	; 0x24
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fc23 	bl	80037e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff26 	bl	8002df0 <prvUnlockQueue>
	}
 8002fa4:	bf00      	nop
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08e      	sub	sp, #56	; 0x38
 8002fb0:	af04      	add	r7, sp, #16
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	623b      	str	r3, [r7, #32]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61fb      	str	r3, [r7, #28]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ff2:	2354      	movs	r3, #84	; 0x54
 8002ff4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b54      	cmp	r3, #84	; 0x54
 8002ffa:	d00a      	beq.n	8003012 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	61bb      	str	r3, [r7, #24]
}
 800300e:	bf00      	nop
 8003010:	e7fe      	b.n	8003010 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01e      	beq.n	8003056 <xTaskCreateStatic+0xaa>
 8003018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01b      	beq.n	8003056 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003026:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	2202      	movs	r2, #2
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003030:	2300      	movs	r3, #0
 8003032:	9303      	str	r3, [sp, #12]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f850 	bl	80030ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800304e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003050:	f000 f8cc 	bl	80031ec <prvAddNewTaskToReadyList>
 8003054:	e001      	b.n	800305a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800305a:	697b      	ldr	r3, [r7, #20]
	}
 800305c:	4618      	mov	r0, r3
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af04      	add	r7, sp, #16
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fc85 	bl	8004988 <pvPortMalloc>
 800307e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003086:	2054      	movs	r0, #84	; 0x54
 8003088:	f001 fc7e 	bl	8004988 <pvPortMalloc>
 800308c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
 800309a:	e005      	b.n	80030a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800309c:	6978      	ldr	r0, [r7, #20]
 800309e:	f001 fd37 	bl	8004b10 <vPortFree>
 80030a2:	e001      	b.n	80030a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9303      	str	r3, [sp, #12]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	9302      	str	r3, [sp, #8]
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f80e 	bl	80030ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030d2:	69f8      	ldr	r0, [r7, #28]
 80030d4:	f000 f88a 	bl	80031ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030d8:	2301      	movs	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	e002      	b.n	80030e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030e4:	69bb      	ldr	r3, [r7, #24]
	}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b088      	sub	sp, #32
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003106:	3b01      	subs	r3, #1
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f023 0307 	bic.w	r3, r3, #7
 8003114:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	617b      	str	r3, [r7, #20]
}
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	e012      	b.n	8003162 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	7819      	ldrb	r1, [r3, #0]
 8003144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	4413      	add	r3, r2
 800314a:	3334      	adds	r3, #52	; 0x34
 800314c:	460a      	mov	r2, r1
 800314e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	3301      	adds	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d9e9      	bls.n	800313c <prvInitialiseNewTask+0x4e>
 8003168:	e000      	b.n	800316c <prvInitialiseNewTask+0x7e>
		{
			break;
 800316a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	2b06      	cmp	r3, #6
 8003178:	d901      	bls.n	800317e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800317a:	2306      	movs	r3, #6
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2200      	movs	r2, #0
 800318e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff f993 	bl	80024c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	3318      	adds	r3, #24
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f98e 	bl	80024c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	f1c3 0207 	rsb	r2, r3, #7
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	69b8      	ldr	r0, [r7, #24]
 80031ce:	f001 f989 	bl	80044e4 <pxPortInitialiseStack>
 80031d2:	4602      	mov	r2, r0
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031e4:	bf00      	nop
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031f4:	f001 faa6 	bl	8004744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 8003200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d110      	bne.n	800323a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003218:	f000 fc0e 	bl	8003a38 <prvInitialiseTaskLists>
 800321c:	e00d      	b.n	800323a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <prvAddNewTaskToReadyList+0xc0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d802      	bhi.n	800323a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003234:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <prvAddNewTaskToReadyList+0xc4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <prvAddNewTaskToReadyList+0xc4>)
 8003242:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <prvAddNewTaskToReadyList+0xc8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <prvAddNewTaskToReadyList+0xc8>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <prvAddNewTaskToReadyList+0xcc>)
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7ff f934 	bl	80024da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003272:	f001 fa97 	bl	80047a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <prvAddNewTaskToReadyList+0xc0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <prvAddNewTaskToReadyList+0xd0>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2000085c 	.word	0x2000085c
 80032a8:	2000075c 	.word	0x2000075c
 80032ac:	20000868 	.word	0x20000868
 80032b0:	20000878 	.word	0x20000878
 80032b4:	20000864 	.word	0x20000864
 80032b8:	20000760 	.word	0x20000760
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <vTaskDelay+0x60>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <vTaskDelay+0x30>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60bb      	str	r3, [r7, #8]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032f0:	f000 f880 	bl	80033f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fd06 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032fc:	f000 f888 	bl	8003410 <xTaskResumeAll>
 8003300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <vTaskDelay+0x64>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000884 	.word	0x20000884
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003336:	463a      	mov	r2, r7
 8003338:	1d39      	adds	r1, r7, #4
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f87e 	bl	8000440 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	460a      	mov	r2, r1
 8003356:	4921      	ldr	r1, [pc, #132]	; (80033dc <vTaskStartScheduler+0xb4>)
 8003358:	4821      	ldr	r0, [pc, #132]	; (80033e0 <vTaskStartScheduler+0xb8>)
 800335a:	f7ff fe27 	bl	8002fac <xTaskCreateStatic>
 800335e:	4603      	mov	r3, r0
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <vTaskStartScheduler+0xbc>)
 8003362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <vTaskStartScheduler+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e001      	b.n	8003376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d102      	bne.n	8003382 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800337c:	f000 fd2a 	bl	8003dd4 <xTimerCreateTimerTask>
 8003380:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d116      	bne.n	80033b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	613b      	str	r3, [r7, #16]
}
 800339a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <vTaskStartScheduler+0xc0>)
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <vTaskStartScheduler+0xc4>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <vTaskStartScheduler+0xc8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033b0:	f001 f926 	bl	8004600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033b4:	e00e      	b.n	80033d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d10a      	bne.n	80033d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	60fb      	str	r3, [r7, #12]
}
 80033d0:	bf00      	nop
 80033d2:	e7fe      	b.n	80033d2 <vTaskStartScheduler+0xaa>
}
 80033d4:	bf00      	nop
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08004df4 	.word	0x08004df4
 80033e0:	08003a09 	.word	0x08003a09
 80033e4:	20000880 	.word	0x20000880
 80033e8:	2000087c 	.word	0x2000087c
 80033ec:	20000868 	.word	0x20000868
 80033f0:	20000860 	.word	0x20000860

080033f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <vTaskSuspendAll+0x18>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	4a03      	ldr	r2, [pc, #12]	; (800340c <vTaskSuspendAll+0x18>)
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	bf00      	nop
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	20000884 	.word	0x20000884

08003410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800341e:	4b41      	ldr	r3, [pc, #260]	; (8003524 <xTaskResumeAll+0x114>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <xTaskResumeAll+0x2c>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	603b      	str	r3, [r7, #0]
}
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800343c:	f001 f982 	bl	8004744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003440:	4b38      	ldr	r3, [pc, #224]	; (8003524 <xTaskResumeAll+0x114>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3b01      	subs	r3, #1
 8003446:	4a37      	ldr	r2, [pc, #220]	; (8003524 <xTaskResumeAll+0x114>)
 8003448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <xTaskResumeAll+0x114>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d161      	bne.n	8003516 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003452:	4b35      	ldr	r3, [pc, #212]	; (8003528 <xTaskResumeAll+0x118>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d05d      	beq.n	8003516 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800345a:	e02e      	b.n	80034ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <xTaskResumeAll+0x11c>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3318      	adds	r3, #24
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f893 	bl	8002594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3304      	adds	r3, #4
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f88e 	bl	8002594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	2201      	movs	r2, #1
 800347e:	409a      	lsls	r2, r3
 8003480:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <xTaskResumeAll+0x120>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <xTaskResumeAll+0x120>)
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4a27      	ldr	r2, [pc, #156]	; (8003534 <xTaskResumeAll+0x124>)
 8003498:	441a      	add	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3304      	adds	r3, #4
 800349e:	4619      	mov	r1, r3
 80034a0:	4610      	mov	r0, r2
 80034a2:	f7ff f81a 	bl	80024da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <xTaskResumeAll+0x128>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <xTaskResumeAll+0x12c>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <xTaskResumeAll+0x11c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1cc      	bne.n	800345c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034c8:	f000 fb54 	bl	8003b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034cc:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <xTaskResumeAll+0x130>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d010      	beq.n	80034fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034d8:	f000 f846 	bl	8003568 <xTaskIncrementTick>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <xTaskResumeAll+0x12c>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f1      	bne.n	80034d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80034f4:	4b12      	ldr	r3, [pc, #72]	; (8003540 <xTaskResumeAll+0x130>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <xTaskResumeAll+0x12c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003502:	2301      	movs	r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <xTaskResumeAll+0x134>)
 8003508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003516:	f001 f945 	bl	80047a4 <vPortExitCritical>

	return xAlreadyYielded;
 800351a:	68bb      	ldr	r3, [r7, #8]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000884 	.word	0x20000884
 8003528:	2000085c 	.word	0x2000085c
 800352c:	2000081c 	.word	0x2000081c
 8003530:	20000864 	.word	0x20000864
 8003534:	20000760 	.word	0x20000760
 8003538:	2000075c 	.word	0x2000075c
 800353c:	20000870 	.word	0x20000870
 8003540:	2000086c 	.word	0x2000086c
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <xTaskGetTickCount+0x1c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003554:	687b      	ldr	r3, [r7, #4]
}
 8003556:	4618      	mov	r0, r3
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000860 	.word	0x20000860

08003568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003572:	4b51      	ldr	r3, [pc, #324]	; (80036b8 <xTaskIncrementTick+0x150>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	f040 808d 	bne.w	8003696 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800357c:	4b4f      	ldr	r3, [pc, #316]	; (80036bc <xTaskIncrementTick+0x154>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003584:	4a4d      	ldr	r2, [pc, #308]	; (80036bc <xTaskIncrementTick+0x154>)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d120      	bne.n	80035d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003590:	4b4b      	ldr	r3, [pc, #300]	; (80036c0 <xTaskIncrementTick+0x158>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	603b      	str	r3, [r7, #0]
}
 80035ac:	bf00      	nop
 80035ae:	e7fe      	b.n	80035ae <xTaskIncrementTick+0x46>
 80035b0:	4b43      	ldr	r3, [pc, #268]	; (80036c0 <xTaskIncrementTick+0x158>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <xTaskIncrementTick+0x15c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a41      	ldr	r2, [pc, #260]	; (80036c0 <xTaskIncrementTick+0x158>)
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4a41      	ldr	r2, [pc, #260]	; (80036c4 <xTaskIncrementTick+0x15c>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b40      	ldr	r3, [pc, #256]	; (80036c8 <xTaskIncrementTick+0x160>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a3f      	ldr	r2, [pc, #252]	; (80036c8 <xTaskIncrementTick+0x160>)
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	f000 fad1 	bl	8003b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035d2:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <xTaskIncrementTick+0x164>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d34d      	bcc.n	8003678 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <xTaskIncrementTick+0x158>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <xTaskIncrementTick+0x82>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <xTaskIncrementTick+0x84>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f0:	4b36      	ldr	r3, [pc, #216]	; (80036cc <xTaskIncrementTick+0x164>)
 80035f2:	f04f 32ff 	mov.w	r2, #4294967295
 80035f6:	601a      	str	r2, [r3, #0]
					break;
 80035f8:	e03e      	b.n	8003678 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <xTaskIncrementTick+0x158>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	d203      	bcs.n	800361a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003612:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <xTaskIncrementTick+0x164>)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6013      	str	r3, [r2, #0]
						break;
 8003618:	e02e      	b.n	8003678 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3304      	adds	r3, #4
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe ffb8 	bl	8002594 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3318      	adds	r3, #24
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe ffaf 	bl	8002594 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	2201      	movs	r2, #1
 800363c:	409a      	lsls	r2, r3
 800363e:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <xTaskIncrementTick+0x168>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4313      	orrs	r3, r2
 8003644:	4a22      	ldr	r2, [pc, #136]	; (80036d0 <xTaskIncrementTick+0x168>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4a1f      	ldr	r2, [pc, #124]	; (80036d4 <xTaskIncrementTick+0x16c>)
 8003656:	441a      	add	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f7fe ff3b 	bl	80024da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <xTaskIncrementTick+0x170>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d3b4      	bcc.n	80035dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003672:	2301      	movs	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003676:	e7b1      	b.n	80035dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <xTaskIncrementTick+0x170>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	4915      	ldr	r1, [pc, #84]	; (80036d4 <xTaskIncrementTick+0x16c>)
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d907      	bls.n	80036a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	e004      	b.n	80036a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <xTaskIncrementTick+0x174>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3301      	adds	r3, #1
 800369c:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <xTaskIncrementTick+0x174>)
 800369e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <xTaskIncrementTick+0x178>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80036ac:	697b      	ldr	r3, [r7, #20]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000884 	.word	0x20000884
 80036bc:	20000860 	.word	0x20000860
 80036c0:	20000814 	.word	0x20000814
 80036c4:	20000818 	.word	0x20000818
 80036c8:	20000874 	.word	0x20000874
 80036cc:	2000087c 	.word	0x2000087c
 80036d0:	20000864 	.word	0x20000864
 80036d4:	20000760 	.word	0x20000760
 80036d8:	2000075c 	.word	0x2000075c
 80036dc:	2000086c 	.word	0x2000086c
 80036e0:	20000870 	.word	0x20000870

080036e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <vTaskSwitchContext+0xa4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036f2:	4b26      	ldr	r3, [pc, #152]	; (800378c <vTaskSwitchContext+0xa8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036f8:	e03f      	b.n	800377a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <vTaskSwitchContext+0xa8>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <vTaskSwitchContext+0xac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	f1c3 031f 	rsb	r3, r3, #31
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	491f      	ldr	r1, [pc, #124]	; (8003794 <vTaskSwitchContext+0xb0>)
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <vTaskSwitchContext+0x5c>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	607b      	str	r3, [r7, #4]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <vTaskSwitchContext+0x5a>
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4a12      	ldr	r2, [pc, #72]	; (8003794 <vTaskSwitchContext+0xb0>)
 800374c:	4413      	add	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	3308      	adds	r3, #8
 8003762:	429a      	cmp	r2, r3
 8003764:	d104      	bne.n	8003770 <vTaskSwitchContext+0x8c>
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <vTaskSwitchContext+0xb4>)
 8003778:	6013      	str	r3, [r2, #0]
}
 800377a:	bf00      	nop
 800377c:	371c      	adds	r7, #28
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000884 	.word	0x20000884
 800378c:	20000870 	.word	0x20000870
 8003790:	20000864 	.word	0x20000864
 8003794:	20000760 	.word	0x20000760
 8003798:	2000075c 	.word	0x2000075c

0800379c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	60fb      	str	r3, [r7, #12]
}
 80037be:	bf00      	nop
 80037c0:	e7fe      	b.n	80037c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <vTaskPlaceOnEventList+0x44>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3318      	adds	r3, #24
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fea9 	bl	8002522 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037d0:	2101      	movs	r1, #1
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	f000 fa98 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	2000075c 	.word	0x2000075c

080037e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	617b      	str	r3, [r7, #20]
}
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <vTaskPlaceOnEventListRestricted+0x54>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3318      	adds	r3, #24
 8003812:	4619      	mov	r1, r3
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7fe fe60 	bl	80024da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	68b8      	ldr	r0, [r7, #8]
 800382a:	f000 fa6d 	bl	8003d08 <prvAddCurrentTaskToDelayedList>
	}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000075c 	.word	0x2000075c

0800383c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	60fb      	str	r3, [r7, #12]
}
 8003864:	bf00      	nop
 8003866:	e7fe      	b.n	8003866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	3318      	adds	r3, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fe91 	bl	8002594 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003872:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <xTaskRemoveFromEventList+0xac>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11c      	bne.n	80038b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3304      	adds	r3, #4
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fe88 	bl	8002594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <xTaskRemoveFromEventList+0xb0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	4a16      	ldr	r2, [pc, #88]	; (80038ec <xTaskRemoveFromEventList+0xb0>)
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <xTaskRemoveFromEventList+0xb4>)
 80038a4:	441a      	add	r2, r3
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7fe fe14 	bl	80024da <vListInsertEnd>
 80038b2:	e005      	b.n	80038c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	3318      	adds	r3, #24
 80038b8:	4619      	mov	r1, r3
 80038ba:	480e      	ldr	r0, [pc, #56]	; (80038f4 <xTaskRemoveFromEventList+0xb8>)
 80038bc:	f7fe fe0d 	bl	80024da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <xTaskRemoveFromEventList+0xbc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d905      	bls.n	80038da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038ce:	2301      	movs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <xTaskRemoveFromEventList+0xc0>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e001      	b.n	80038de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038de:	697b      	ldr	r3, [r7, #20]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000884 	.word	0x20000884
 80038ec:	20000864 	.word	0x20000864
 80038f0:	20000760 	.word	0x20000760
 80038f4:	2000081c 	.word	0x2000081c
 80038f8:	2000075c 	.word	0x2000075c
 80038fc:	20000870 	.word	0x20000870

08003900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <vTaskInternalSetTimeOutState+0x24>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <vTaskInternalSetTimeOutState+0x28>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	605a      	str	r2, [r3, #4]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	20000874 	.word	0x20000874
 8003928:	20000860 	.word	0x20000860

0800392c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10a      	bne.n	8003952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	613b      	str	r3, [r7, #16]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10a      	bne.n	800396e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	60fb      	str	r3, [r7, #12]
}
 800396a:	bf00      	nop
 800396c:	e7fe      	b.n	800396c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800396e:	f000 fee9 	bl	8004744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003972:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <xTaskCheckForTimeOut+0xbc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d102      	bne.n	8003992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	e023      	b.n	80039da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <xTaskCheckForTimeOut+0xc0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d007      	beq.n	80039ae <xTaskCheckForTimeOut+0x82>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039a8:	2301      	movs	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e015      	b.n	80039da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d20b      	bcs.n	80039d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7ff ff9b 	bl	8003900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	e004      	b.n	80039da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039da:	f000 fee3 	bl	80047a4 <vPortExitCritical>

	return xReturn;
 80039de:	69fb      	ldr	r3, [r7, #28]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000860 	.word	0x20000860
 80039ec:	20000874 	.word	0x20000874

080039f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <vTaskMissedYield+0x14>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000870 	.word	0x20000870

08003a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a10:	f000 f852 	bl	8003ab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <prvIdleTask+0x28>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d9f9      	bls.n	8003a10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <prvIdleTask+0x2c>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a2c:	e7f0      	b.n	8003a10 <prvIdleTask+0x8>
 8003a2e:	bf00      	nop
 8003a30:	20000760 	.word	0x20000760
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	e00c      	b.n	8003a5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4a12      	ldr	r2, [pc, #72]	; (8003a98 <prvInitialiseTaskLists+0x60>)
 8003a50:	4413      	add	r3, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fd14 	bl	8002480 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d9ef      	bls.n	8003a44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a64:	480d      	ldr	r0, [pc, #52]	; (8003a9c <prvInitialiseTaskLists+0x64>)
 8003a66:	f7fe fd0b 	bl	8002480 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a6a:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <prvInitialiseTaskLists+0x68>)
 8003a6c:	f7fe fd08 	bl	8002480 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a70:	480c      	ldr	r0, [pc, #48]	; (8003aa4 <prvInitialiseTaskLists+0x6c>)
 8003a72:	f7fe fd05 	bl	8002480 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a76:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <prvInitialiseTaskLists+0x70>)
 8003a78:	f7fe fd02 	bl	8002480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a7c:	480b      	ldr	r0, [pc, #44]	; (8003aac <prvInitialiseTaskLists+0x74>)
 8003a7e:	f7fe fcff 	bl	8002480 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <prvInitialiseTaskLists+0x78>)
 8003a84:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <prvInitialiseTaskLists+0x64>)
 8003a86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <prvInitialiseTaskLists+0x7c>)
 8003a8a:	4a05      	ldr	r2, [pc, #20]	; (8003aa0 <prvInitialiseTaskLists+0x68>)
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000760 	.word	0x20000760
 8003a9c:	200007ec 	.word	0x200007ec
 8003aa0:	20000800 	.word	0x20000800
 8003aa4:	2000081c 	.word	0x2000081c
 8003aa8:	20000830 	.word	0x20000830
 8003aac:	20000848 	.word	0x20000848
 8003ab0:	20000814 	.word	0x20000814
 8003ab4:	20000818 	.word	0x20000818

08003ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003abe:	e019      	b.n	8003af4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ac0:	f000 fe40 	bl	8004744 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <prvCheckTasksWaitingTermination+0x50>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fd5f 	bl	8002594 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <prvCheckTasksWaitingTermination+0x54>)
 8003ade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003ae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003aea:	f000 fe5b 	bl	80047a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f810 	bl	8003b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <prvCheckTasksWaitingTermination+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e1      	bne.n	8003ac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000830 	.word	0x20000830
 8003b0c:	2000085c 	.word	0x2000085c
 8003b10:	20000844 	.word	0x20000844

08003b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fff0 	bl	8004b10 <vPortFree>
				vPortFree( pxTCB );
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 ffed 	bl	8004b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b36:	e018      	b.n	8003b6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d103      	bne.n	8003b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 ffe4 	bl	8004b10 <vPortFree>
	}
 8003b48:	e00f      	b.n	8003b6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d00a      	beq.n	8003b6a <prvDeleteTCB+0x56>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <prvDeleteTCB+0x54>
	}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvResetNextTaskUnblockTime+0x44>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <prvResetNextTaskUnblockTime+0x14>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <prvResetNextTaskUnblockTime+0x16>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <prvResetNextTaskUnblockTime+0x48>)
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b96:	e008      	b.n	8003baa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <prvResetNextTaskUnblockTime+0x44>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <prvResetNextTaskUnblockTime+0x48>)
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000814 	.word	0x20000814
 8003bbc:	2000087c 	.word	0x2000087c

08003bc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <xTaskGetSchedulerState+0x34>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d102      	bne.n	8003bd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e008      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <xTaskGetSchedulerState+0x38>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	e001      	b.n	8003be6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003be6:	687b      	ldr	r3, [r7, #4]
	}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20000868 	.word	0x20000868
 8003bf8:	20000884 	.word	0x20000884

08003bfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d06e      	beq.n	8003cf0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c12:	4b3a      	ldr	r3, [pc, #232]	; (8003cfc <xTaskPriorityDisinherit+0x100>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d00a      	beq.n	8003c32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	60fb      	str	r3, [r7, #12]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60bb      	str	r3, [r7, #8]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d044      	beq.n	8003cf0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d140      	bne.n	8003cf0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fc8e 	bl	8002594 <uxListRemove>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	491f      	ldr	r1, [pc, #124]	; (8003d00 <xTaskPriorityDisinherit+0x104>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <xTaskPriorityDisinherit+0xae>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <xTaskPriorityDisinherit+0x108>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <xTaskPriorityDisinherit+0x108>)
 8003ca8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	f1c3 0207 	rsb	r2, r3, #7
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <xTaskPriorityDisinherit+0x108>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <xTaskPriorityDisinherit+0x108>)
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <xTaskPriorityDisinherit+0x104>)
 8003cde:	441a      	add	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f7fe fbf7 	bl	80024da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003cf0:	697b      	ldr	r3, [r7, #20]
	}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000075c 	.word	0x2000075c
 8003d00:	20000760 	.word	0x20000760
 8003d04:	20000864 	.word	0x20000864

08003d08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fe fc38 	bl	8002594 <uxListRemove>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	2201      	movs	r2, #1
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d10a      	bne.n	8003d60 <prvAddCurrentTaskToDelayedList+0x58>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	481a      	ldr	r0, [pc, #104]	; (8003dc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d5a:	f7fe fbbe 	bl	80024da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d5e:	e026      	b.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d209      	bcs.n	8003d8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4619      	mov	r1, r3
 8003d84:	4610      	mov	r0, r2
 8003d86:	f7fe fbcc 	bl	8002522 <vListInsert>
}
 8003d8a:	e010      	b.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f7fe fbc2 	bl	8002522 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d202      	bcs.n	8003dae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003da8:	4a09      	ldr	r2, [pc, #36]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6013      	str	r3, [r2, #0]
}
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000860 	.word	0x20000860
 8003dbc:	2000075c 	.word	0x2000075c
 8003dc0:	20000864 	.word	0x20000864
 8003dc4:	20000848 	.word	0x20000848
 8003dc8:	20000818 	.word	0x20000818
 8003dcc:	20000814 	.word	0x20000814
 8003dd0:	2000087c 	.word	0x2000087c

08003dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003dde:	f000 fb41 	bl	8004464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003de2:	4b1c      	ldr	r3, [pc, #112]	; (8003e54 <xTimerCreateTimerTask+0x80>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d021      	beq.n	8003e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003df2:	1d3a      	adds	r2, r7, #4
 8003df4:	f107 0108 	add.w	r1, r7, #8
 8003df8:	f107 030c 	add.w	r3, r7, #12
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fb39 	bl	8000474 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	9202      	str	r2, [sp, #8]
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	2306      	movs	r3, #6
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	460a      	mov	r2, r1
 8003e14:	4910      	ldr	r1, [pc, #64]	; (8003e58 <xTimerCreateTimerTask+0x84>)
 8003e16:	4811      	ldr	r0, [pc, #68]	; (8003e5c <xTimerCreateTimerTask+0x88>)
 8003e18:	f7ff f8c8 	bl	8002fac <xTaskCreateStatic>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a10      	ldr	r2, [pc, #64]	; (8003e60 <xTimerCreateTimerTask+0x8c>)
 8003e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <xTimerCreateTimerTask+0x8c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	613b      	str	r3, [r7, #16]
}
 8003e46:	bf00      	nop
 8003e48:	e7fe      	b.n	8003e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e4a:	697b      	ldr	r3, [r7, #20]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200008b8 	.word	0x200008b8
 8003e58:	08004dfc 	.word	0x08004dfc
 8003e5c:	080040a1 	.word	0x080040a1
 8003e60:	200008bc 	.word	0x200008bc

08003e64 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8003e72:	202c      	movs	r0, #44	; 0x2c
 8003e74:	f000 fd88 	bl	8004988 <pvPortMalloc>
 8003e78:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00d      	beq.n	8003e9c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	9301      	str	r3, [sp, #4]
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f846 	bl	8003f20 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8003e9c:	697b      	ldr	r3, [r7, #20]
	}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08a      	sub	sp, #40	; 0x28
 8003eaa:	af02      	add	r7, sp, #8
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003eb4:	232c      	movs	r3, #44	; 0x2c
 8003eb6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	2b2c      	cmp	r3, #44	; 0x2c
 8003ebc:	d00a      	beq.n	8003ed4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	61bb      	str	r3, [r7, #24]
}
 8003ed0:	bf00      	nop
 8003ed2:	e7fe      	b.n	8003ed2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <xTimerCreateStatic+0x4a>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	617b      	str	r3, [r7, #20]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f809 	bl	8003f20 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8003f16:	69fb      	ldr	r3, [r7, #28]
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	617b      	str	r3, [r7, #20]
}
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003f50:	f000 fa88 	bl	8004464 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	6a3a      	ldr	r2, [r7, #32]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	3304      	adds	r3, #4
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe faa2 	bl	80024c0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	623b      	str	r3, [r7, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <xTimerGenericCommand+0x98>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02a      	beq.n	8004010 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b05      	cmp	r3, #5
 8003fca:	dc18      	bgt.n	8003ffe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fcc:	f7ff fdf8 	bl	8003bc0 <xTaskGetSchedulerState>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d109      	bne.n	8003fea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <xTimerGenericCommand+0x98>)
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f107 0114 	add.w	r1, r7, #20
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	f7fe fbff 	bl	80027e4 <xQueueGenericSend>
 8003fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe8:	e012      	b.n	8004010 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <xTimerGenericCommand+0x98>)
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	f107 0114 	add.w	r1, r7, #20
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f7fe fbf5 	bl	80027e4 <xQueueGenericSend>
 8003ffa:	6278      	str	r0, [r7, #36]	; 0x24
 8003ffc:	e008      	b.n	8004010 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <xTimerGenericCommand+0x98>)
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f107 0114 	add.w	r1, r7, #20
 8004006:	2300      	movs	r3, #0
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	f7fe fce9 	bl	80029e0 <xQueueGenericSendFromISR>
 800400e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004012:	4618      	mov	r0, r3
 8004014:	3728      	adds	r7, #40	; 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200008b8 	.word	0x200008b8

08004020 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <prvProcessExpiredTimer+0x7c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe faab 	bl	8002594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d122      	bne.n	800408c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	18d1      	adds	r1, r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f000 f8c8 	bl	80041e8 <prvInsertTimerInActiveList>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800405e:	2300      	movs	r3, #0
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	2100      	movs	r1, #0
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f7ff ff8b 	bl	8003f84 <xTimerGenericCommand>
 800406e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	60fb      	str	r3, [r7, #12]
}
 8004088:	bf00      	nop
 800408a:	e7fe      	b.n	800408a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	6978      	ldr	r0, [r7, #20]
 8004092:	4798      	blx	r3
}
 8004094:	bf00      	nop
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	200008b0 	.word	0x200008b0

080040a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a8:	f107 0308 	add.w	r3, r7, #8
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f857 	bl	8004160 <prvGetNextExpireTime>
 80040b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f803 	bl	80040c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040be:	f000 f8d5 	bl	800426c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c2:	e7f1      	b.n	80040a8 <prvTimerTask+0x8>

080040c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040ce:	f7ff f991 	bl	80033f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f866 	bl	80041a8 <prvSampleTimeNow>
 80040dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d130      	bne.n	8004146 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d806      	bhi.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040f2:	f7ff f98d 	bl	8003410 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff91 	bl	8004020 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040fe:	e024      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <prvProcessTimerOrBlockTask+0x90>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <prvProcessTimerOrBlockTask+0x94>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	f7fe ff0d 	bl	8002f44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800412a:	f7ff f971 	bl	8003410 <xTaskResumeAll>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <prvProcessTimerOrBlockTask+0x98>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
}
 8004144:	e001      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004146:	f7ff f963 	bl	8003410 <xTaskResumeAll>
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200008b4 	.word	0x200008b4
 8004158:	200008b8 	.word	0x200008b8
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <prvGetNextExpireTime+0x44>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <prvGetNextExpireTime+0x44>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e001      	b.n	8004196 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	200008b0 	.word	0x200008b0

080041a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041b0:	f7ff f9ca 	bl	8003548 <xTaskGetTickCount>
 80041b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d205      	bcs.n	80041cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041c0:	f000 f8ee 	bl	80043a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200008c0 	.word	0x200008c0

080041e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d812      	bhi.n	8004234 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e01b      	b.n	800425a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <prvInsertTimerInActiveList+0x7c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe f978 	bl	8002522 <vListInsert>
 8004232:	e012      	b.n	800425a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d206      	bcs.n	800424a <prvInsertTimerInActiveList+0x62>
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e007      	b.n	800425a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <prvInsertTimerInActiveList+0x80>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe f964 	bl	8002522 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800425a:	697b      	ldr	r3, [r7, #20]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	200008b4 	.word	0x200008b4
 8004268:	200008b0 	.word	0x200008b0

0800426c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	; 0x30
 8004270:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004272:	e081      	b.n	8004378 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	db7d      	blt.n	8004376 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3304      	adds	r3, #4
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe f982 	bl	8002594 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004290:	1d3b      	adds	r3, r7, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff88 	bl	80041a8 <prvSampleTimeNow>
 8004298:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b09      	cmp	r3, #9
 800429e:	d86b      	bhi.n	8004378 <prvProcessReceivedCommands+0x10c>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <prvProcessReceivedCommands+0x3c>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042d1 	.word	0x080042d1
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d1 	.word	0x080042d1
 80042b4:	08004379 	.word	0x08004379
 80042b8:	0800432d 	.word	0x0800432d
 80042bc:	08004365 	.word	0x08004365
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042d1 	.word	0x080042d1
 80042c8:	08004379 	.word	0x08004379
 80042cc:	0800432d 	.word	0x0800432d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	18d1      	adds	r1, r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a3a      	ldr	r2, [r7, #32]
 80042dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042de:	f7ff ff83 	bl	80041e8 <prvInsertTimerInActiveList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d047      	beq.n	8004378 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d13f      	bne.n	8004378 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	441a      	add	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	2100      	movs	r1, #0
 8004308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800430a:	f7ff fe3b 	bl	8003f84 <xTimerGenericCommand>
 800430e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d130      	bne.n	8004378 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61bb      	str	r3, [r7, #24]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	617b      	str	r3, [r7, #20]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	18d1      	adds	r1, r2, r3
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800435e:	f7ff ff43 	bl	80041e8 <prvInsertTimerInActiveList>
					break;
 8004362:	e009      	b.n	8004378 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	f000 fbce 	bl	8004b10 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004374:	e000      	b.n	8004378 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004376:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <prvProcessReceivedCommands+0x130>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f107 0108 	add.w	r1, r7, #8
 8004380:	2200      	movs	r2, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fbc4 	bl	8002b10 <xQueueReceive>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f47f af72 	bne.w	8004274 <prvProcessReceivedCommands+0x8>
	}
}
 8004390:	bf00      	nop
 8004392:	bf00      	nop
 8004394:	3728      	adds	r7, #40	; 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200008b8 	.word	0x200008b8

080043a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b088      	sub	sp, #32
 80043a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043a6:	e045      	b.n	8004434 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043a8:	4b2c      	ldr	r3, [pc, #176]	; (800445c <prvSwitchTimerLists+0xbc>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <prvSwitchTimerLists+0xbc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe f8e7 	bl	8002594 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d12e      	bne.n	8004434 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90e      	bls.n	8004406 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043f4:	4b19      	ldr	r3, [pc, #100]	; (800445c <prvSwitchTimerLists+0xbc>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7fe f88f 	bl	8002522 <vListInsert>
 8004404:	e016      	b.n	8004434 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	2300      	movs	r3, #0
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	2100      	movs	r1, #0
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fdb7 	bl	8003f84 <xTimerGenericCommand>
 8004416:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10a      	bne.n	8004434 <prvSwitchTimerLists+0x94>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	603b      	str	r3, [r7, #0]
}
 8004430:	bf00      	nop
 8004432:	e7fe      	b.n	8004432 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <prvSwitchTimerLists+0xbc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1b4      	bne.n	80043a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <prvSwitchTimerLists+0xbc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <prvSwitchTimerLists+0xc0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <prvSwitchTimerLists+0xbc>)
 800444a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <prvSwitchTimerLists+0xc0>)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	6013      	str	r3, [r2, #0]
}
 8004452:	bf00      	nop
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	200008b0 	.word	0x200008b0
 8004460:	200008b4 	.word	0x200008b4

08004464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800446a:	f000 f96b 	bl	8004744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <prvCheckForValidListAndQueue+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d120      	bne.n	80044b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004476:	4814      	ldr	r0, [pc, #80]	; (80044c8 <prvCheckForValidListAndQueue+0x64>)
 8004478:	f7fe f802 	bl	8002480 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800447c:	4813      	ldr	r0, [pc, #76]	; (80044cc <prvCheckForValidListAndQueue+0x68>)
 800447e:	f7fd ffff 	bl	8002480 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <prvCheckForValidListAndQueue+0x6c>)
 8004484:	4a10      	ldr	r2, [pc, #64]	; (80044c8 <prvCheckForValidListAndQueue+0x64>)
 8004486:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <prvCheckForValidListAndQueue+0x70>)
 800448a:	4a10      	ldr	r2, [pc, #64]	; (80044cc <prvCheckForValidListAndQueue+0x68>)
 800448c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800448e:	2300      	movs	r3, #0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <prvCheckForValidListAndQueue+0x74>)
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <prvCheckForValidListAndQueue+0x78>)
 8004496:	210c      	movs	r1, #12
 8004498:	200a      	movs	r0, #10
 800449a:	f7fe f90d 	bl	80026b8 <xQueueGenericCreateStatic>
 800449e:	4603      	mov	r3, r0
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <prvCheckForValidListAndQueue+0x60>)
 80044a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <prvCheckForValidListAndQueue+0x60>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <prvCheckForValidListAndQueue+0x60>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	490b      	ldr	r1, [pc, #44]	; (80044e0 <prvCheckForValidListAndQueue+0x7c>)
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fd1c 	bl	8002ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044b8:	f000 f974 	bl	80047a4 <vPortExitCritical>
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200008b8 	.word	0x200008b8
 80044c8:	20000888 	.word	0x20000888
 80044cc:	2000089c 	.word	0x2000089c
 80044d0:	200008b0 	.word	0x200008b0
 80044d4:	200008b4 	.word	0x200008b4
 80044d8:	2000093c 	.word	0x2000093c
 80044dc:	200008c4 	.word	0x200008c4
 80044e0:	08004e04 	.word	0x08004e04

080044e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b04      	subs	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b04      	subs	r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <pxPortInitialiseStack+0x64>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b14      	subs	r3, #20
 800451e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b04      	subs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f06f 0202 	mvn.w	r2, #2
 8004532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b20      	subs	r3, #32
 8004538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	0800454d 	.word	0x0800454d

0800454c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvTaskExitError+0x54>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d00a      	beq.n	8004576 <prvTaskExitError+0x2a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <prvTaskExitError+0x28>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60bb      	str	r3, [r7, #8]
}
 8004588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800458a:	bf00      	nop
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0fc      	beq.n	800458c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20000044 	.word	0x20000044
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	2000075c 	.word	0x2000075c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045fa:	bf00      	nop
 80045fc:	e000ed08 	.word	0xe000ed08

08004600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004606:	4b46      	ldr	r3, [pc, #280]	; (8004720 <xPortStartScheduler+0x120>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a46      	ldr	r2, [pc, #280]	; (8004724 <xPortStartScheduler+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10a      	bne.n	8004626 <xPortStartScheduler+0x26>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004626:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <xPortStartScheduler+0x120>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <xPortStartScheduler+0x128>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10a      	bne.n	8004646 <xPortStartScheduler+0x46>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <xPortStartScheduler+0x12c>)
 8004648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <xPortStartScheduler+0x130>)
 800466c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x134>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004674:	e009      	b.n	800468a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <xPortStartScheduler+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a2d      	ldr	r2, [pc, #180]	; (8004734 <xPortStartScheduler+0x134>)
 800467e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d0ef      	beq.n	8004676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <xPortStartScheduler+0x134>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00a      	beq.n	80046b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <xPortStartScheduler+0x134>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <xPortStartScheduler+0x134>)
 80046c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xPortStartScheduler+0x134>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <xPortStartScheduler+0x134>)
 80046cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <xPortStartScheduler+0x138>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <xPortStartScheduler+0x138>)
 80046dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <xPortStartScheduler+0x138>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <xPortStartScheduler+0x138>)
 80046e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046ee:	f000 f8dd 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <xPortStartScheduler+0x13c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046f8:	f000 f8fc 	bl	80048f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <xPortStartScheduler+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <xPortStartScheduler+0x140>)
 8004702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004708:	f7ff ff66 	bl	80045d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800470c:	f7fe ffea 	bl	80036e4 <vTaskSwitchContext>
	prvTaskExitError();
 8004710:	f7ff ff1c 	bl	800454c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	410fc271 	.word	0x410fc271
 8004728:	410fc270 	.word	0x410fc270
 800472c:	e000e400 	.word	0xe000e400
 8004730:	20000984 	.word	0x20000984
 8004734:	20000988 	.word	0x20000988
 8004738:	e000ed20 	.word	0xe000ed20
 800473c:	20000044 	.word	0x20000044
 8004740:	e000ef34 	.word	0xe000ef34

08004744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	607b      	str	r3, [r7, #4]
}
 800475c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <vPortEnterCritical+0x58>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <vPortEnterCritical+0x58>)
 8004766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <vPortEnterCritical+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10f      	bne.n	8004790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <vPortEnterCritical+0x5c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <vPortEnterCritical+0x4c>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	603b      	str	r3, [r7, #0]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vPortEnterCritical+0x4a>
	}
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	20000044 	.word	0x20000044
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <vPortExitCritical+0x50>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vPortExitCritical+0x24>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	607b      	str	r3, [r7, #4]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <vPortExitCritical+0x50>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <vPortExitCritical+0x50>)
 80047d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <vPortExitCritical+0x50>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <vPortExitCritical+0x42>
 80047da:	2300      	movs	r3, #0
 80047dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f383 8811 	msr	BASEPRI, r3
}
 80047e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000044 	.word	0x20000044
	...

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7fe ff58 	bl	80036e4 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	2000075c 	.word	0x2000075c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7fe fe71 	bl	8003568 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <xPortSysTickHandler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <vPortSetupTimerInterrupt+0x44>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e010 	.word	0xe000e010
 80048e4:	e000e018 	.word	0xe000e018
 80048e8:	20000038 	.word	0x20000038
 80048ec:	10624dd3 	.word	0x10624dd3
 80048f0:	e000e014 	.word	0xe000e014

080048f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004904 <vPortEnableVFP+0x10>
 80048f8:	6801      	ldr	r1, [r0, #0]
 80048fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048fe:	6001      	str	r1, [r0, #0]
 8004900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004902:	bf00      	nop
 8004904:	e000ed88 	.word	0xe000ed88

08004908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800490e:	f3ef 8305 	mrs	r3, IPSR
 8004912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d914      	bls.n	8004944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800491a:	4a17      	ldr	r2, [pc, #92]	; (8004978 <vPortValidateInterruptPriority+0x70>)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004924:	4b15      	ldr	r3, [pc, #84]	; (800497c <vPortValidateInterruptPriority+0x74>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	7afa      	ldrb	r2, [r7, #11]
 800492a:	429a      	cmp	r2, r3
 800492c:	d20a      	bcs.n	8004944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004944:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <vPortValidateInterruptPriority+0x78>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <vPortValidateInterruptPriority+0x7c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d90a      	bls.n	800496a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	603b      	str	r3, [r7, #0]
}
 8004966:	bf00      	nop
 8004968:	e7fe      	b.n	8004968 <vPortValidateInterruptPriority+0x60>
	}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000e3f0 	.word	0xe000e3f0
 800497c:	20000984 	.word	0x20000984
 8004980:	e000ed0c 	.word	0xe000ed0c
 8004984:	20000988 	.word	0x20000988

08004988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004994:	f7fe fd2e 	bl	80033f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004998:	4b58      	ldr	r3, [pc, #352]	; (8004afc <pvPortMalloc+0x174>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049a0:	f000 f910 	bl	8004bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049a4:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <pvPortMalloc+0x178>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f040 808e 	bne.w	8004ace <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01d      	beq.n	80049f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049b8:	2208      	movs	r2, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d014      	beq.n	80049f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f023 0307 	bic.w	r3, r3, #7
 80049d0:	3308      	adds	r3, #8
 80049d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <pvPortMalloc+0x6c>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	617b      	str	r3, [r7, #20]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d069      	beq.n	8004ace <pvPortMalloc+0x146>
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <pvPortMalloc+0x17c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d864      	bhi.n	8004ace <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a04:	4b40      	ldr	r3, [pc, #256]	; (8004b08 <pvPortMalloc+0x180>)
 8004a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a08:	4b3f      	ldr	r3, [pc, #252]	; (8004b08 <pvPortMalloc+0x180>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a0e:	e004      	b.n	8004a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d903      	bls.n	8004a2c <pvPortMalloc+0xa4>
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f1      	bne.n	8004a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <pvPortMalloc+0x174>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d04b      	beq.n	8004ace <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	4413      	add	r3, r2
 8004a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	2308      	movs	r3, #8
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d91f      	bls.n	8004a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <pvPortMalloc+0xf8>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	613b      	str	r3, [r7, #16]
}
 8004a7c:	bf00      	nop
 8004a7e:	e7fe      	b.n	8004a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a92:	69b8      	ldr	r0, [r7, #24]
 8004a94:	f000 f8f8 	bl	8004c88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <pvPortMalloc+0x17c>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	4a18      	ldr	r2, [pc, #96]	; (8004b04 <pvPortMalloc+0x17c>)
 8004aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aa6:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <pvPortMalloc+0x17c>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <pvPortMalloc+0x184>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d203      	bcs.n	8004aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ab2:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <pvPortMalloc+0x17c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <pvPortMalloc+0x184>)
 8004ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <pvPortMalloc+0x178>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ace:	f7fe fc9f 	bl	8003410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <pvPortMalloc+0x16a>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <pvPortMalloc+0x168>
	return pvReturn;
 8004af2:	69fb      	ldr	r3, [r7, #28]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	; 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20001594 	.word	0x20001594
 8004b00:	200015a0 	.word	0x200015a0
 8004b04:	20001598 	.word	0x20001598
 8004b08:	2000158c 	.word	0x2000158c
 8004b0c:	2000159c 	.word	0x2000159c

08004b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d048      	beq.n	8004bb4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b22:	2308      	movs	r3, #8
 8004b24:	425b      	negs	r3, r3
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <vPortFree+0xac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <vPortFree+0x44>
	__asm volatile
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	f383 8811 	msr	BASEPRI, r3
 8004b46:	f3bf 8f6f 	isb	sy
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	60fb      	str	r3, [r7, #12]
}
 8004b50:	bf00      	nop
 8004b52:	e7fe      	b.n	8004b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <vPortFree+0x62>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60bb      	str	r3, [r7, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <vPortFree+0xac>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d019      	beq.n	8004bb4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d115      	bne.n	8004bb4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <vPortFree+0xac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	401a      	ands	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b98:	f7fe fc2c 	bl	80033f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <vPortFree+0xb0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <vPortFree+0xb0>)
 8004ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004baa:	6938      	ldr	r0, [r7, #16]
 8004bac:	f000 f86c 	bl	8004c88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bb0:	f7fe fc2e 	bl	8003410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	200015a0 	.word	0x200015a0
 8004bc0:	20001598 	.word	0x20001598

08004bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bd0:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <prvHeapInit+0xac>)
 8004bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3307      	adds	r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <prvHeapInit+0xac>)
 8004bf4:	4413      	add	r3, r2
 8004bf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bfc:	4a1d      	ldr	r2, [pc, #116]	; (8004c74 <prvHeapInit+0xb0>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <prvHeapInit+0xb0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c10:	2208      	movs	r2, #8
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0307 	bic.w	r3, r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <prvHeapInit+0xb4>)
 8004c24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <prvHeapInit+0xb4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c2e:	4b12      	ldr	r3, [pc, #72]	; (8004c78 <prvHeapInit+0xb4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c44:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <prvHeapInit+0xb4>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a0a      	ldr	r2, [pc, #40]	; (8004c7c <prvHeapInit+0xb8>)
 8004c52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <prvHeapInit+0xbc>)
 8004c5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <prvHeapInit+0xc0>)
 8004c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	2000098c 	.word	0x2000098c
 8004c74:	2000158c 	.word	0x2000158c
 8004c78:	20001594 	.word	0x20001594
 8004c7c:	2000159c 	.word	0x2000159c
 8004c80:	20001598 	.word	0x20001598
 8004c84:	200015a0 	.word	0x200015a0

08004c88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <prvInsertBlockIntoFreeList+0xac>)
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e002      	b.n	8004c9c <prvInsertBlockIntoFreeList+0x14>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d8f7      	bhi.n	8004c96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d108      	bne.n	8004cca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	441a      	add	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	441a      	add	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d118      	bne.n	8004d10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d00d      	beq.n	8004d06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	441a      	add	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e008      	b.n	8004d18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d06:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <prvInsertBlockIntoFreeList+0xb0>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	e003      	b.n	8004d18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d002      	beq.n	8004d26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000158c 	.word	0x2000158c
 8004d38:	20001594 	.word	0x20001594

08004d3c <__libc_init_array>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	4d0d      	ldr	r5, [pc, #52]	; (8004d74 <__libc_init_array+0x38>)
 8004d40:	4c0d      	ldr	r4, [pc, #52]	; (8004d78 <__libc_init_array+0x3c>)
 8004d42:	1b64      	subs	r4, r4, r5
 8004d44:	10a4      	asrs	r4, r4, #2
 8004d46:	2600      	movs	r6, #0
 8004d48:	42a6      	cmp	r6, r4
 8004d4a:	d109      	bne.n	8004d60 <__libc_init_array+0x24>
 8004d4c:	4d0b      	ldr	r5, [pc, #44]	; (8004d7c <__libc_init_array+0x40>)
 8004d4e:	4c0c      	ldr	r4, [pc, #48]	; (8004d80 <__libc_init_array+0x44>)
 8004d50:	f000 f82e 	bl	8004db0 <_init>
 8004d54:	1b64      	subs	r4, r4, r5
 8004d56:	10a4      	asrs	r4, r4, #2
 8004d58:	2600      	movs	r6, #0
 8004d5a:	42a6      	cmp	r6, r4
 8004d5c:	d105      	bne.n	8004d6a <__libc_init_array+0x2e>
 8004d5e:	bd70      	pop	{r4, r5, r6, pc}
 8004d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d64:	4798      	blx	r3
 8004d66:	3601      	adds	r6, #1
 8004d68:	e7ee      	b.n	8004d48 <__libc_init_array+0xc>
 8004d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d6e:	4798      	blx	r3
 8004d70:	3601      	adds	r6, #1
 8004d72:	e7f2      	b.n	8004d5a <__libc_init_array+0x1e>
 8004d74:	08004e3c 	.word	0x08004e3c
 8004d78:	08004e3c 	.word	0x08004e3c
 8004d7c:	08004e3c 	.word	0x08004e3c
 8004d80:	08004e40 	.word	0x08004e40

08004d84 <memcpy>:
 8004d84:	440a      	add	r2, r1
 8004d86:	4291      	cmp	r1, r2
 8004d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d8c:	d100      	bne.n	8004d90 <memcpy+0xc>
 8004d8e:	4770      	bx	lr
 8004d90:	b510      	push	{r4, lr}
 8004d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	d1f9      	bne.n	8004d92 <memcpy+0xe>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_init>:
 8004db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db2:	bf00      	nop
 8004db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db6:	bc08      	pop	{r3}
 8004db8:	469e      	mov	lr, r3
 8004dba:	4770      	bx	lr

08004dbc <_fini>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr
